<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>webpack编译提速DllPlugin和hard-source-webpack-plugin</title>
    <link href="/2023/05/28/webpack%E7%BC%96%E8%AF%91%E6%8F%90%E9%80%9FDllPlugin%E5%92%8Chard-source-webpack-plugin/"/>
    <url>/2023/05/28/webpack%E7%BC%96%E8%AF%91%E6%8F%90%E9%80%9FDllPlugin%E5%92%8Chard-source-webpack-plugin/</url>
    
    <content type="html"><![CDATA[<h3 id="DLLPlugin"><a href="#DLLPlugin" class="headerlink" title="DLLPlugin"></a>DLLPlugin</h3><h3 id="一：DLLPlugin作用"><a href="#一：DLLPlugin作用" class="headerlink" title="一：DLLPlugin作用"></a><strong>一：DLLPlugin作用</strong></h3><p>Webpack官网中对这两个插件的介绍：DLLPlugin 和 DLLReferencePlugin 能实现了拆分 bundles，同时还大大提升了构建的速度。实际上就是可以事先将常用的基础模块(如React、react-dom)等抽离出来，打包到一个个单独的动态链接库(dll)中去，后面再打包业务代码时若遇到需要导入的模块存在于前面打包好的某个动态链接库中时，就跳过相关的依赖的打包，直接使用动态链接库中的代码，以此来缩短webpack构建时间，提升构建速度。</p><h3 id="二：使用介绍"><a href="#二：使用介绍" class="headerlink" title="二：使用介绍"></a>二：使用介绍</h3><p>Webpack 内置了对动态链接库的支持，需要通过 2 个内置插件访问。DllPlugin：在一个额外的webpack配置中设置，用于将指定模块抽离，打包出动态链接库文件；DLLReferencePlugin：用于在webpack主配置文件中配置如何引入已经打包好的动态链接库文件。<code>一般用于生产环境，开发环境会忽略一些报错提示，对开发环境不够友好</code></p><p>下面以user项目 为例，介绍 DllPlugin和DLLReferencePlugin的使用。</p><p><strong>第一步：构建出动态链接库文件</strong><br>假设项目中需要将react、react-dom等拆分出来，打包成动态链接库文件。我们首先需要新建一个webpack配置文件，因为动态链接库相关产物需要由一份独立的构建输出。<br>1.1 在根目录下新建Webpack配置文件webpack.dll.config.js，配置主要内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  qiuwenbin &lt;qiuwenbin@wshifu.com&gt;</span><br><span class="hljs-comment"> * @Date: 2023-05-16 16:07:06</span><br><span class="hljs-comment"> * @LastEditors: qiuwenbin</span><br><span class="hljs-comment"> * @LastEditTime: 2023-05-18 17:22:42</span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// 如果更改了依赖的包文件，需要重新将编译后的包文件上传到CDN上</span><br>  <span class="hljs-comment">// webpack.common.config 的 assets 文件名也需要改成 对应的 hash 值</span><br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">vendor</span>:[<br>      <span class="hljs-string">&#x27;react&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-dom&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-router-dom&#x27;</span>,<br>      <span class="hljs-string">&#x27;redux&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-router-redux&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-redux&#x27;</span>,<br>      <span class="hljs-string">&#x27;react-loadable&#x27;</span>,<br>      <span class="hljs-string">&#x27;qs&#x27;</span>,<br>      <span class="hljs-string">&#x27;query-string&#x27;</span>,<br>      <span class="hljs-string">&#x27;history&#x27;</span>,<br>      <span class="hljs-string">&#x27;classnames&#x27;</span>,<br>      <span class="hljs-string">&#x27;axios&#x27;</span>,<br>      <span class="hljs-string">&#x27;rxjs&#x27;</span>,<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;[name].dll.js&quot;</span>,<br>    <span class="hljs-attr">library</span>: <span class="hljs-string">&quot;[name]_library&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DllPlugin</span>(&#123;<br>      <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>, <span class="hljs-string">&#x27;[name].manifest.json&#x27;</span>),<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;[name]_library&#x27;</span><br>    &#125;)<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1.2 执行构建命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json</span><br><span class="hljs-attr">&quot;build:dll&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;npm run remove:dist &amp;&amp; webpack --config build/webpack.dll.config.js --mode production&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>1.3 构建产物</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">├── dist<br>  ├── vendor<span class="hljs-selector-class">.dll</span><span class="hljs-selector-class">.js</span><br>  └── vendors<span class="hljs-selector-class">.manifest</span>.json<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** <span class="hljs-doctag">@license</span> React v16.14.0</span><br><span class="hljs-comment"> * react.production.min.js</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Copyright (c) Facebook, Inc. and its affiliates.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This source code is licensed under the MIT license found in the</span><br><span class="hljs-comment"> * LICENSE file in the root directory of this source tree.</span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">var</span> r=<span class="hljs-title function_">n</span>(<span class="hljs-number">68</span>),i=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>&amp;&amp;<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">for</span>,o=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.element&quot;</span>):<span class="hljs-number">60103</span>,s=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.portal&quot;</span>):<span class="hljs-number">60106</span>,u=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.fragment&quot;</span>):<span class="hljs-number">60107</span>,c=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.strict_mode&quot;</span>):<span class="hljs-number">60108</span>,a=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.profiler&quot;</span>):<span class="hljs-number">60114</span>,l=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.provider&quot;</span>):<span class="hljs-number">60109</span>,f=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.context&quot;</span>):<span class="hljs-number">60110</span>,p=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.forward_ref&quot;</span>):<span class="hljs-number">60112</span>,h=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.suspense&quot;</span>):<span class="hljs-number">60113</span>,d=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.memo&quot;</span>):<span class="hljs-number">60115</span>,b=i?<span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;react.lazy&quot;</span>):<span class="hljs-number">60116</span>,y=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>&amp;&amp;<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">v</span>(<span class="hljs-params">t</span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-string">&quot;https://reactjs.org/docs/error-decoder.html?invariant=&quot;</span>+t,n=<span class="hljs-number">1</span>;n&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;n++)e+=<span class="hljs-string">&quot;&amp;args[]=&quot;</span>+<span class="hljs-built_in">encodeURIComponent</span>(<span class="hljs-variable language_">arguments</span>[n]);<span class="hljs-keyword">return</span><span class="hljs-string">&quot;Minified React error #&quot;</span>+t+<span class="hljs-string">&quot;; visit &quot;</span>+e+<span class="hljs-string">&quot; for the full message or use the non-minified dev environment for full errors and additional helpful warnings.&quot;</span>&#125;<span class="hljs-keyword">var</span> m=&#123;<span class="hljs-attr">isMounted</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span>!<span class="hljs-number">1</span>&#125;,<span class="hljs-attr">enqueueForceUpdate</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-attr">enqueueReplaceState</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-attr">enqueueSetState</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;&#125;,g=&#123;&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">w</span>(<span class="hljs-params">t,e,n</span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>=t,<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>=e,<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>=g,<span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>=n||m&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">x</span>(<span class="hljs-params"></span>)&#123;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">O</span>(<span class="hljs-params">t,e,n</span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>=t,<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>=e,<span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span>=g,<span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>=n||m&#125;w.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">isReactComponent</span>=&#123;&#125;,w.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setState</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">t,e</span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;object&quot;</span>!=<span class="hljs-keyword">typeof</span> t&amp;&amp;<span class="hljs-string">&quot;function&quot;</span>!=<span class="hljs-keyword">typeof</span> t&amp;&amp;<span class="hljs-literal">null</span>!=t)<span class="hljs-keyword">throw</span> <span class="hljs-title class_">Error</span>(<span class="hljs-title function_">v</span>(<span class="hljs-number">85</span>));<span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>.<span class="hljs-title function_">enqueueSetState</span>(<span class="hljs-variable language_">this</span>,t,e,<span class="hljs-string">&quot;setState&quot;</span>)&#125;,w.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">forceUpdate</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>.<span class="hljs-title function_">enqueueForceUpdate</span>(<span class="hljs-variable language_">this</span>,t,<span class="hljs-string">&quot;forceUpdate&quot;</span>)&#125;,...<br></code></pre></td></tr></table></figure><p>产物中react_dll.js中包含了模块的代码，模块存放在一个对象中，用对象的key作为 ID。 并且还通过<br>react_dll 变量把自己暴露在了全局中，也就是可以通过 window.react_dll(ID) 可以访问到它里面包含的模块。<br>再看另一种产物 *.manifest.json, 类似这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vendor_library&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;./node_modules/react/index.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/react-dom/index.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">43</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/object-assign/index.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">141</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/react/cjs/react.production.min.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">201</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/react-dom/cjs/react-dom.production.min.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">369</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/scheduler/index.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">370</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;./node_modules/scheduler/cjs/scheduler.production.min.js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">371</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;buildMeta&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;providedExports&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span> <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可见 manifest.json 文件清楚地描述了与其对应的 dll.js 文件中包含了哪些模块，以及每个模块的路径和 ID。</p><p><strong>第二步：在主webpack文件中使用动态链接库文件</strong><br>2.1 在根目录下Webpack主配置文件webpack.config.js，配置主要内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlIncludeAssetsPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;add-asset-html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">plugins</span>:[<br>    <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DllReferencePlugin</span>(&#123;<br>      <span class="hljs-attr">context</span>: __dirname,<br>      <span class="hljs-attr">manifest</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist/vendor.manifest.json&#x27;</span>),<br>    &#125;),<br>    <span class="hljs-comment">// 将dll产物插入到html</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlIncludeAssetsPlugin</span>(&#123;<br>      <span class="hljs-attr">assets</span>: <span class="hljs-string">&#x27;main.dll.js&#x27;</span>,<br>      <span class="hljs-attr">append</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-comment">// publicPath: &#x27;https://qncdn.wanshifu.com/wshifu-user/js/&#x27;</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、DllPlugin原理"><a href="#三、DllPlugin原理" class="headerlink" title="三、DllPlugin原理"></a>三、DllPlugin原理</h3><p><code>xxx.manifest.json</code>文件name指的是对应的dll库名字，描述了哪些模块被打进来dll了， 用模块名当id标识出来 大概是一个模块清单;<code>xxx.dll.js</code>就是模块的源码了<code>xxx.dll.js</code> 是各个模块的源码集合通过<code>key（模块id）–&gt; value</code>查询出来</p><p>那么webpack如何查找打包好的模块呢？而不需要重复打包</p><p>1、比如index.js引入了 react</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">//./node_modules/_react@16.13.1@react/index.js</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">React</span>);<br><span class="hljs-number">2</span>、他会去mainfest.<span class="hljs-property">json</span>找模块id 其实就是react关键字拼接版本号 + index.<span class="hljs-property">js</span>组成id去寻找模块<br>即 ‘./node_modules/’+’_react@<span class="hljs-number">16.13</span><span class="hljs-number">.1</span>@react’+ ‘/index.<span class="hljs-property">js</span>’ 组成的id<br></code></pre></td></tr></table></figure><p>3、找到有模块的话，就不再去打包了</p><h3 id="hard-source-webpack-plugin"><a href="#hard-source-webpack-plugin" class="headerlink" title="hard-source-webpack-plugin"></a>hard-source-webpack-plugin</h3><h3 id="一-HardSourceWebpackPlugin作用"><a href="#一-HardSourceWebpackPlugin作用" class="headerlink" title="一:HardSourceWebpackPlugin作用"></a>一:HardSourceWebpackPlugin作用</h3><p>webpack编译时，每次都需要将所有模块重新编译一遍，这就会导致编译时间过慢，尤其是当项目逐渐臃肿的情况下，这种情况会越来越明显，<code>HardSourceWebpackPlugin</code>通过将先编译的模块存储在硬盘缓存中，以便后续编译过程中可以重用这些模块，从而加速编译过程。</p><h3 id="二-使用介绍"><a href="#二-使用介绍" class="headerlink" title="二:使用介绍"></a>二:使用介绍</h3><p>在<code>webpack.dev.config.js</code>中配置plugins即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: xiao·Zhang</span><br><span class="hljs-comment"> * @Date: 2018-06-06 09:24:13</span><br><span class="hljs-comment"> * @Last Modified by: xiao·Zhang</span><br><span class="hljs-comment"> * @Last Modified time: 2019-03-25 11:16:47</span><br><span class="hljs-comment"> * @file: 开发环境webpack参数配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 引入hard-source-webpack-plugin</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hard-source-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;friendly-errors-webpack-plugin&#x27;</span>);<br><span class="hljs-keyword">const</span> devConfig = &#123;<br>  <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br><span class="hljs-attr">plugins</span>: [<br>...<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span>(), <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendlyErrorsWebpackPlugin</span>()<br>]<br>&#125;;<br><br><span class="hljs-keyword">const</span> mergeConfig = <span class="hljs-title function_">merge</span>(&#123;<span class="hljs-comment">//commonConfig与devConfig合并导出</span><br><span class="hljs-title function_">customizeArray</span>(<span class="hljs-params">a, b, key</span>) &#123;<br><span class="hljs-comment">/*入口app放弃合并, 采用全替换*/</span><br><span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;entry.app&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> b;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br>&#125;)(commonConfig, devConfig);<br><br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = mergeConfig;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;hard-source-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">HardSourceWebpackPlugin</span>(&#123;<br>    <span class="hljs-comment">// cacheDirectory是在高速缓存写入。默认情况下，将缓存存储在node_modules下的目录中，因此如 </span><br>    <span class="hljs-comment">// 果清除了node_modules，则缓存也是如此</span><br>    <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-string">&#x27;node_modules/.cache/hard-source/[confighash]&#x27;</span>,<br>    <span class="hljs-comment">// Either an absolute path or relative to webpack&#x27;s options.context.</span><br>    <span class="hljs-comment">// Sets webpack&#x27;s recordsPath if not already set.</span><br>    <span class="hljs-attr">recordsPath</span>: <span class="hljs-string">&#x27;node_modules/.cache/hard-source/[confighash]/records.json&#x27;</span>,<br>    <span class="hljs-comment">// configHash在启动webpack实例时转换webpack配置，并用于cacheDirectory为不同的webpack配 </span><br>    <span class="hljs-comment">// 置构建不同的缓存</span><br>    <span class="hljs-attr">configHash</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">webpackConfig</span>) &#123;<br>       <span class="hljs-comment">// node-object-hash on npm can be used to build this.</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;node-object-hash&#x27;</span>)(&#123;<span class="hljs-attr">sort</span>: <span class="hljs-literal">false</span>&#125;).<span class="hljs-title function_">hash</span>(webpackConfig);<br>    &#125;,<br>    <span class="hljs-comment">// 当加载器，插件，其他构建时脚本或其他动态依赖项发生更改时，hard-source需要替换缓存以确保输 </span><br>    <span class="hljs-comment">// 出正确。environmentHash被用来确定这一点。如果散列与先前的构建不同，则将使用新的缓存</span><br>    <span class="hljs-attr">environmentHash</span>: &#123;<br>       <span class="hljs-attr">root</span>: process.<span class="hljs-title function_">cwd</span>(),<br>       <span class="hljs-attr">directories</span>: [],<br>       <span class="hljs-attr">files</span>: [<span class="hljs-string">&#x27;package-lock.json&#x27;</span>, <span class="hljs-string">&#x27;yarn.lock&#x27;</span>],<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>编译产物会放入到<code>node_modules内的.cache中的hard-source</code>文件中(所以个人认为该插件仅能在本地开发环境使用)。在webpack编译过程中会首先去校验<code> package-lock.json, yarn.lock文件</code>查看是否有依赖变化。第一次构建会比较慢需要生产缓存内容，第二次编译则会寻找是否存在编译内容提升编译速度</p><p>第一次构建：写入缓存内容、跟踪项目依赖项</p><p><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230528112245162.png" alt="image-20230528112245162"></p><p>第二次构建：查找缓存，提速编译</p><p><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230528112427211.png" alt="image-20230528112427211"></p><p>当存在缓存时，编译速度得到了很大的提升，加速打包大约在40%-50%左右;</p><p>但是当我将这件加入到<code>webpack.build.config.js</code>中，发现在webpack编译过程中卡住了（不知道为啥）</p><p><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/img_v2_8bae8b50-a999-4394-abc2-4e7fd867355g.png" alt="img_v2_8bae8b50-a999-4394-abc2-4e7fd867355g"></p><h3 id="三：原理"><a href="#三：原理" class="headerlink" title="三：原理"></a>三：原理</h3><p><code>HardSourceWebpackPlugin</code>实现原理跟<code>DllPlugin</code>类似</p><p>首先，在编译的过程中，每个模块都会被分配一个唯一标识符，这个标识符是<code>webpack</code>自动生成的，并且是一个<code>数字或字符串类型的id</code>,将编译内容作为<code>value</code>，以key-value的形式存储在硬盘缓存中，二次编译时<code>HardSourceWebpackPlugin</code>会检查模块的标识符是否存在于缓存中，存在则使用，不存在则走正常的编译流程。</p><h3 id="DLL-与-HardSourceWebpackPlugin对比"><a href="#DLL-与-HardSourceWebpackPlugin对比" class="headerlink" title="DLL 与 HardSourceWebpackPlugin对比"></a>DLL 与 HardSourceWebpackPlugin对比</h3><table><thead><tr><th>缓存</th><th>DLL</th></tr></thead><tbody><tr><td>把常用的文件存储到内存或硬盘中</td><td>把公共代码打包为dll文件放到硬盘中</td></tr><tr><td>再次打包时，直接取读取缓存</td><td>再次打包时，读取dll文件，不重新打包</td></tr><tr><td>加载时间减少</td><td>打包时间减少</td></tr></tbody></table><p>1.dll应用配置相对繁琐，需要先配置<code>webpack.dll.config.js</code>将模块打包出来，再通过<code>DLLReferencePlugin</code>引入(可以利用<code>autodll-webpack-plugin</code>优化)</p><p>2.<code>HardSourceWebpackPlugin</code>插件带来的效果是显著的，现在这个功能点包含webpack5中。详情可通过<a href="https://webpack.js.org/configuration/other-options/#cache">https://webpack.js.org/configuration/other-options/#cache</a> 查看。当设置<code> cache.type: &quot;filesystem&quot;</code> 时，webpack 会在内部以分层方式启用文件系统缓存和内存缓存。优先级为内存缓存-&gt;文件缓存-&gt;即时编译</p>]]></content>
    
    
    <categories>
      
      <category>项目相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack源码阅读</title>
    <link href="/2022/02/10/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2022/02/10/webpack%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="webpack入口"><a href="#webpack入口" class="headerlink" title="webpack入口"></a>webpack入口</h4><p>​    1.执行<code>npm run build</code> 最终找到的是<code>webpack/bin/webpack.js</code></p><p>​    2.上述文件里判断了<code>webpack-cli</code>是否安装， 如果安装了就执行<code>runCli</code>方法</p><p>​    3.在<code>runCli</code>方法里加载了<code>webpack-cli/bin/cli.js</code>文件</p><p>​    4.在<code>cli.js</code>中核心就是判断<code>webpack</code>是否安装了，如果安装了，则执行<code>runCli</code>方法</p><p>​    5.在<code>Runcli</code>里处理命令行参数（依赖commander第三方包），执行 <code>new WebpackCli</code>的时候会触发action回调(通过触发this.program.action) 而这个<code>this.program = program(commander)</code>;</p><p>​    6.<code>action</code>回调里执行了<code>loadCommandByName</code>方法，而在这个方法里又执行了<code>makeCommand</code>方法最终调用<code>this.runWebpack</code></p><ol start="7"><li><p>执行<code>runWebpack</code>时候，执行了<code>createCompiler()</code></p></li><li><p>在<code>createCompiler</code>内部调用了<code>webpack</code>函数(接受配置文件和回调函数，这个函数是我们本地安装的webpack)，最终返回<strong>compiler</strong>对象，就是webpack打包的第一个核心的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 引入原生的webpack 和配置信息</span><br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.config&#x27;</span>);<br><br><span class="hljs-comment">// 2.  调用webpack方法 传入配置信息 获取compiler实例</span><br><span class="hljs-keyword">const</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br><br><span class="hljs-comment">// 调用complier的run方法</span><br>compiler.<span class="hljs-title function_">run</span>(<span class="hljs-function">(<span class="hljs-params">err,stats</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1111</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><h3 id="webpack执行"><a href="#webpack执行" class="headerlink" title="webpack执行"></a>webpack执行</h3><p>1.webpack函数通过调用<code>createCompiler</code>方法生成<code>compiler</code></p><p>2.在<code>createCompiler</code>方法内部调用<strong>new Compiler</strong>方法生成<code>compiler</code>实例对象;在创建了<code>compiler</code>对象(对象身上挂载了很多属性，其中<code>hooks</code>尤为重要)后还判断了<code>plugin</code>，挂载插件；<strong>在webpack打包过程中，插件是在compiler声明之后进行的挂载（并不代表执行）</strong>    </p><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230304094739406.png" alt="image-20230304094739406" style="zoom:50%;" /><h5 id="new-Compiler都做了些什么？"><a href="#new-Compiler都做了些什么？" class="headerlink" title="new Compiler都做了些什么？"></a>new Compiler都做了些什么？</h5><ul><li>1.定义了<code>run</code>方法：例如<code>finalCallback(最终回调)</code>，<code>onCompiled方法（compile完成回调）</code> <code>run方法（执行构建 调用this.compile方法）</code><strong>重点关注run方法内部调用的this.compile方法 执行构建 里面包含了webpack的构建流程</strong></li></ul><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230304095840253.png" alt="image-20230304095840253" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230304110010679.png" alt="image-20230304110010679" style="zoom:50%;" /><ul><li><h5 id="2-compile做了什么？"><a href="#2-compile做了什么？" class="headerlink" title="2.compile做了什么？"></a>2.compile做了什么？</h5><ul><li>   在它内部包含了一个完整的打包流程</li><li>   具体的模块打包是在<code>make</code>环节完成的，在此处只是触发了<code>make</code>钩子 具体做了什么需要找到<code>make</code>定义的地方</li></ul></li></ul><p>3.<code>createCompiler</code>方法内部调用<code>WebpackOptionsApply</code>的<code>process(options,compiler)</code>方法处理所有的<code>options</code>,内部都是采用<strong>plugin.call/plugin.apply</strong>的方法传入<code>compiler</code>进行“埋地雷”挂载上hooks监听事件，使用的是<code>compiler.hooks.xxx.tap</code>等方法订阅事件。</p><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230304100419861.png" alt="image-20230304100419861" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Findly-qwb/Pic/main/image-20230304094541856.png" alt="image-20230304094541856" style="zoom:50%;" />]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端常见攻击及防御</title>
    <link href="/2022/01/30/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E5%BE%A1/"/>
    <url>/2022/01/30/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E6%94%BB%E5%87%BB%E5%8F%8A%E9%98%B2%E5%BE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="前端常见的攻击方式"><a href="#前端常见的攻击方式" class="headerlink" title="前端常见的攻击方式"></a>前端常见的攻击方式</h2><h5 id="常见的攻击方式"><a href="#常见的攻击方式" class="headerlink" title="常见的攻击方式:"></a>常见的攻击方式:</h5><ul><li>XSS(Cross Site Scripting)跨站脚本攻击</li><li>CSRF (Scross-site request forgery)跨站请求伪造</li><li>SQL注入攻击</li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote><p>跨站脚本攻击允许攻击者将恶意代码植入到提供给其他用户适用的页面中；</p><p>目标：为了盗取存储在客户端的cookie或者其他网站用于识别客户端的敏感信息，一旦获取到这些信息，攻击者可以假冒合法身份与网站交互</p></blockquote><p>根据攻击来源，XSS攻击可以分为一下三种：</p><ul><li>存储型：<ul><li>将恶意代码提交到数据库，网站请求将恶意代码从数据库带出，对网站进行攻击</li><li>常见于<strong>带有用户保存数据的网站功能</strong>如<code>论坛发帖</code> <code>商品评论</code> <code>用户私信</code>等</li></ul></li><li>反射型<ul><li>攻击者构造出特殊的URL，其中包含恶意代码，用户打开特殊URL，服务端将恶意代码从URL中取出，拼接在HTML中返回，导致在网站中执行恶意代码</li><li>恶意代码窃取用户数据并发送到攻击者的网站或者冒充用户行为，调用目标网站接口执行攻击者指定的操作</li><li><strong>存储型和反射型XXS的区别是</strong>：存储型XSS的恶意代码存在数据库里，反射性XSS的恶意代码存在URL里</li></ul></li><li>DOM型XSS<ul><li>攻击者构造特殊的URL包含恶意代码，前端js取出URL中的恶意代码并执行，恶意代码窃取用户数据并发送到攻击者网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作</li><li><strong>DOM型XXS跟前两种XSS的区别是</strong>:DOM型XSS攻击中，取出和执行恶意代码由浏览器端完成，属于前端JavaScript自身的安全漏洞，其他两种属于服务端的安全漏洞</li></ul></li></ul><h3 id="XXS的防御"><a href="#XXS的防御" class="headerlink" title="XXS的防御"></a>XXS的防御</h3><p>XSS攻击的两大要素</p><ul><li>攻击者提交恶意代码</li><li>浏览器执行恶意代码</li></ul><p>针对第一要素，在用户输入过程中，过滤掉用户输入的恶劣代码提交后端。后端写入数据库前对输入进行过滤。</p><p>在使用**.innerHTML、.outerHTML、document.write()** 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 <strong>.textContent、.setAttribute()</strong>  等</p><p>如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患；</p><p>DOM 中的内联事件监听器，如 <strong>location、onclick、onerror、onload、onmouseover</strong> 等，**<a> 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval()** 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote><p>CSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求</p></blockquote><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>受害者登录<a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a>，并保留了登录凭证（Cookie）</li><li>攻击者引诱受害者访问了<a href="https://link.zhihu.com/?target=http://b.com">http://b.com</a></li><li><a href="https://link.zhihu.com/?target=http://b.com">http://b.com</a> 向 <a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a> 发送了一个请求：<a href="https://link.zhihu.com/?target=http://a.com/act=xx">http://a.com/act=xx</a>。浏览器会默认携带<a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a>的Cookie</li><li><a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a>接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li><li><a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a>以受害者的名义执行了act=xx</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让<a href="https://link.zhihu.com/?target=http://a.com">http://a.com</a>执行了自己定义的操作</li></ul><h3 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a>CSRF的特点</h3><ul><li>由第三方网站发起攻击，利用用户的登录凭证冒充用户提交操作（而不是直接窃取数据）</li><li>请求方式可以是：图片URL、超链接、CORS、Form提交等，部分请求可以直接嵌入到第三方论坛或者文章中</li></ul><h3 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h3><ul><li>阻止不明外域的访问同源检测<code>Samesite Cookie</code></li><li>提交时要求附加本域才能获取的信息CSRF Token双重Cookie验证</li></ul><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><blockquote><p>sql注入攻击，是通过将恶意的sql查询或添加语句插入到应用的输入参数中，在后台sql服务器解析执行</p></blockquote><p>流程如下所示：</p><ul><li>找出SQL漏洞的注入点</li><li>判断数据库的类型以及版本</li><li>猜解用户名和密码</li><li>利用工具查找Web后台管理入口</li><li>入侵和破坏</li></ul><p>预防方式如下：</p><ul><li>严格检查输入变量的类型和格式</li><li>过滤和转义特殊字符</li><li>对访问数据库的Web应用程序采用Web应用防火墙</li></ul><h3 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h3><blockquote><p>　DDOS：分布式拒绝服务攻击（Distributed Denial of Service），简单说就是发送大量请求是使服务器瘫痪。攻击者借助公共网络，将大数量的计算机设备联合起来，向一个或多个目标进行攻击。</p></blockquote><ul><li>预防：<ul><li>软件层不好做，需要硬件预防，一般云服务商都有一套完整的DDOS解决方案</li><li>采用高性能的网络设备、充足的网络带宽保障</li><li>安装专业抗DDOS防火墙</li></ul></li></ul><h3 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h3><blockquote><p>点击劫持（ClickJacking）指在一个Web页面中隐藏了一个透明的iframe，用外层假页面诱导用户点击，实际上是在隐藏的frame上触发了点击事件进行一些用户不知情的操作</p></blockquote><ul><li><p>预防手段</p><ul><li><p>让<code>iframe</code>不能跨域访问</p><p>判断 <code>top.location.hostname</code>（iframe 嵌入的那个网站的域名）和 <code>self.location.hostname</code> （iframe 自己的域名）不一致时可以给出可能不安全的提示，用户确认安全的情况下再操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(top.<span class="hljs-property">loaction</span>.<span class="hljs-property">hostname</span> !== self.<span class="hljs-property">location</span>.<span class="hljs-property">hostname</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您正在访问不安全的页面，即将跳转到安全页面&#x27;</span>)<br>    top.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = self.<span class="hljs-property">location</span>.<span class="hljs-property">href</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在响应头上加上<code>X-Frame-Options:sameorigin</code>表示相同域嵌入此页面（X-Frame-Options:deny表示禁止内嵌此页面）</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redux原理及其简单实现</title>
    <link href="/2022/01/03/Redux%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2022/01/03/Redux%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="Redux原理及其简单实现"><a href="#Redux原理及其简单实现" class="headerlink" title="Redux原理及其简单实现"></a>Redux原理及其简单实现</h3><blockquote><p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理（说明Redux并不是React的专属，也可以用在其他框架）。</p></blockquote><h4 id="1-Redux的由来"><a href="#1-Redux的由来" class="headerlink" title="1. Redux的由来"></a>1. Redux的由来</h4><p>在React组件中，数据的流动是单向的，父子组件的通信可以通过<code>props</code>，兄弟组件的通信可以将状态提升自公共父组件中管理，但是层级过深的组件需要复用状态则会有一定的难度，所以<code>Redux</code>应运而生。</p><h4 id="2-Redux的设计理念"><a href="#2-Redux的设计理念" class="headerlink" title="2. Redux的设计理念"></a>2. Redux的设计理念</h4><p><code>Redux</code>将整个应用的<code>state</code>状态存储在唯一的<code>Store</code>中，组件只能够通过<code>dispatch</code>分发一个<code>action(描述如何修改state)</code>给<code>Store</code>,而不是直接通知组件，组件通过<code>connect</code>与<code>Store</code>相连接，这样能够订阅<code>Store</code>中的状态，由此来更新自己的视图，<code>Connect</code>既是组件读<code>state</code>状态，修改<code>state</code>状态的中间桥梁，而<code>reducer</code>规范了<code>state</code>的修改流程。这样在业务代码中我们只需要发起动作即可，将数据状态修改与业务代码解耦。</p><h4 id="3-Redux的三大原则"><a href="#3-Redux的三大原则" class="headerlink" title="3.Redux的三大原则"></a>3.Redux的三大原则</h4><ul><li><h5 id="单一数据源"><a href="#单一数据源" class="headerlink" title="单一数据源"></a>单一数据源</h5><p>整个应用的数据存储在一个统一的状态树中，也就是我们前面所说的公共的store 文件。在组件都会从这个store中获取数据。</p></li><li><h5 id="state只读"><a href="#state只读" class="headerlink" title="state只读"></a>state只读</h5><p>组件无法直接修改<code>state</code>，只能通过<code>dispatch</code>一个<code>action</code>来触发状态的修改，使得状态修改有迹可循</p></li><li><h5 id="reducer只能是纯函数"><a href="#reducer只能是纯函数" class="headerlink" title="reducer只能是纯函数"></a>reducer只能是纯函数</h5><p><code>reducer</code>接收先前的 state 和 action，并返回新的 state。</p><img src="https://raw.githubusercontent.com/dianmaomao/Pic/main/Redux%E6%95%B0%E6%8D%AE%E6%B5%81.gif" alt="Redux数据流" style="zoom:50%;" /></li></ul><h4 id="4-Redux的实现"><a href="#4-Redux的实现" class="headerlink" title="4. Redux的实现"></a>4. Redux的实现</h4><p><code>Redux</code>利用发布订阅设计模式，个人认为最难理解的是<code>connect</code>高阶函数部分，这也是整个<code>Redux</code>的核心所在,<code>connect</code>接受一个<code>组件</code>作为参数，将更新<code>组件</code>的内部状态定义在<code>connect</code>内部，将<code>组件</code>触发的每个修改组件状态的函数(setState)存在<code>Store</code>的一个<code>listeners</code>数组中,一旦<code>Store</code>中<code>state</code>发生改变，则遍历<code>listeners</code>调用setState，这样传入<code>connect</code>的组件就能更新视图并且获取最新的状态数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  Findly &lt;wenbinqiu42@gmail.com&gt;</span><br><span class="hljs-comment"> * @Date: 2022-01-18 10:05:52</span><br><span class="hljs-comment"> * @LastEditors: Findly</span><br><span class="hljs-comment"> * @LastEditTime: 2022-01-19 17:23:42</span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; changed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./utils/utils&#x27;</span>;<br><span class="hljs-keyword">let</span> state = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> reducer = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">let</span> listeners = [];<br><br><span class="hljs-comment">// state变化 遍历listeners 更新每个connect的视图</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">setState</span> = (<span class="hljs-params">newState</span>) =&gt; &#123;<br>state = newState;<br>listeners.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(state));<br>&#125;;<br><br><span class="hljs-keyword">const</span> store = &#123;<br><span class="hljs-attr">getState</span>: <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> state;<br>&#125;,<br><span class="hljs-attr">dispatch</span>: <span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">setState</span>(<span class="hljs-title function_">reducer</span>(state, action));<br>&#125;,<br><span class="hljs-comment">//收集所有订阅者，并返回取消订阅方法</span><br><span class="hljs-title function_">subscribe</span>(<span class="hljs-params">fn</span>) &#123;<br>listeners.<span class="hljs-title function_">push</span>(fn);<br><span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> index = listeners.<span class="hljs-title function_">indexOf</span>(fn);<br>listeners.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);<br>&#125;;<br>&#125;,<br>&#125;;<br><span class="hljs-comment">// 通过修改dispatch，内部针对不同的action做单独处理，达到实现异步action的目的（中间件的实现原理）</span><br><span class="hljs-keyword">let</span> prevDispatch = store.<span class="hljs-property">dispatch</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br><span class="hljs-comment">// 支持函数action</span><br><span class="hljs-keyword">if</span> (action <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) &#123;<br><span class="hljs-title function_">action</span>(dispatch);<br><span class="hljs-comment">// 支持异步promise函数</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.<span class="hljs-property">payload</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>action.<span class="hljs-property">payload</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">dispatch</span>(&#123; ...action, <span class="hljs-attr">payload</span>: resp &#125;);<br>&#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">prevDispatch</span>(action);<br>&#125;<br>&#125;;<br><br>store.<span class="hljs-property">dispatch</span> = dispatch;<br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createStore</span> = (<span class="hljs-params">_reducer, initState</span>) =&gt; &#123;<br>state = initState;<br>reducer = _reducer;<br><span class="hljs-keyword">return</span> store;<br>&#125;;<br><span class="hljs-comment">// connect 链接组件和state ：读state，修改state</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">connect</span> = (<span class="hljs-params">selector, mapDispatchToProps</span>) =&gt; <span class="hljs-function">(<span class="hljs-params">Component</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 触发Component组件更新的真正状态。一旦update，则Connect高阶组件rerender，Component也rerender</span><br><span class="hljs-keyword">const</span> [, update] = <span class="hljs-title function_">useState</span>(&#123;&#125;);<br><span class="hljs-keyword">const</span> data = selector ? <span class="hljs-title function_">selector</span>(state) : &#123; state &#125;;<br><span class="hljs-keyword">const</span> dispatchs = mapDispatchToProps ? <span class="hljs-title function_">mapDispatchToProps</span>(store.<span class="hljs-property">dispatch</span>) : &#123; <span class="hljs-attr">dispatch</span>: store.<span class="hljs-property">dispatch</span> &#125;;<br><span class="hljs-title function_">useEffect</span>(<br><span class="hljs-function">() =&gt;</span><br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-comment">// 对比当前data跟上次data 精准控制是否需要更新</span><br><span class="hljs-keyword">const</span> newData = selector ? <span class="hljs-title function_">selector</span>(state) : &#123; state &#125;;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">changed</span>(data, newData)) &#123;<br><span class="hljs-title function_">update</span>(&#123;&#125;);<br>&#125;<br>&#125;),<br>[selector]<br>);<br><br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Component</span> &#123;<span class="hljs-attr">...props</span>&#125; &#123;<span class="hljs-attr">...data</span>&#125; &#123;<span class="hljs-attr">...dispatchs</span>&#125; /&gt;</span></span>;<br>&#125;;<br>&#125;;<br><span class="hljs-comment">// 利用context 将Store数据作为全局状态</span><br><span class="hljs-keyword">const</span> appContext = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createContext</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">Provider</span> = (<span class="hljs-params">&#123; store, children &#125;</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">appContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">appContext.Provider</span>&gt;</span></span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然并没有看过<code>Redux</code>的相关源码，但是通过学习它的原理之后，来实现一个简单<code>Redux</code>其实也不是很复杂，在这里贴上相应代码的github，demo中有使用自定的redux测试，&#x1F449;<a href="https://github.com/dianmaomao/react-demo/tree/feature-myRedux">redux的简单实现</a>,推荐一个相关<code>Redux</code>原理与实现的B站视频，代码循序渐进通俗易懂&#x1F449;<a href="https://www.bilibili.com/video/BV1qP4y1n7Xc">手写Redux</a></p>]]></content>
    
    
    <categories>
      
      <category>框架-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地调试react-17.0.2源码环境搭建</title>
    <link href="/2021/12/30/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95react-17.0.2%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/12/30/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95react-17.0.2%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="本地调试react-17-0-2源码环境搭建"><a href="#本地调试react-17-0-2源码环境搭建" class="headerlink" title="本地调试react-17.0.2源码环境搭建"></a>本地调试react-17.0.2源码环境搭建</h4><h5 id="第一步-：-创建一个react项目"><a href="#第一步-：-创建一个react项目" class="headerlink" title="第一步 ： 创建一个react项目"></a>第一步 ： 创建一个react项目</h5><ul><li><p>首先通过官方脚手架 create-react-app 创建一个 react 项目，在终端执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx create-react-app my-debug-react<br></code></pre></td></tr></table></figure></li><li><p>暴露<code>webpack.config.js</code>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">会得到一个config文件夹，里面就是react的webpack配置文件</span><br>cd ./my-debug-react<br>yarn eject <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">出现交互命令选择y即可</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/dianmaomao/Pic/main/image-20211230140135472.png" alt="image-20211230140135472" style="zoom:50%;" /></li></ul><h5 id="第二步：修改react引用"><a href="#第二步：修改react引用" class="headerlink" title="第二步：修改react引用"></a>第二步：修改<code>react</code>引用</h5><ul><li><p>由于 node_modules 中的 react 包是打包好之后的文件，许多代码掺杂在一个文件中，不便于我们对源码进行调试。因此在 my-debug-react 的 src 目录下引入 react 的源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">加me. 是因为我配置了个人github key</span><br>git clone git clone git@me.github.com:facebook/react.git -b 17.0.2 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">接下来进入到src/react安装依赖</span><br>cd ./src/react <br>yarn <br></code></pre></td></tr></table></figure></li><li><p>修改<code>webpack.config.js</code>内<code>alias</code>配置，加上如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;react&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/react/packages/react&#x27;</span>),<br><span class="hljs-string">&#x27;react-dom&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/react/packages/react-dom&#x27;</span>),<br><span class="hljs-string">&#x27;shared&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/react/packages/shared&#x27;</span>),<br><span class="hljs-string">&#x27;react-reconciler&#x27;</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../src/react/packages/react-reconciler&#x27;</span>),<br></code></pre></td></tr></table></figure></li><li><p>我们将 <code>__DEV__</code> 等环境变量默认启用，便于开发调试,修改<code>config/env.js</code>,修改为如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> stringified = &#123;<br><span class="hljs-attr">__DEV__</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">__PROFILE__</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">__UMD__</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">__EXPERIMENTAL__</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&#x27;process.env&#x27;</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(raw).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">env, key</span>) =&gt;</span> &#123;<br>env[key] = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(raw[key]);<br><span class="hljs-keyword">return</span> env;<br>&#125;, &#123;&#125;),<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>根目录下新建<code>.eslintrc.json</code>文件，加入如下配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;react-app&quot;</span>,<br><span class="hljs-string">&quot;globals&quot;</span>: &#123;<br><span class="hljs-string">&quot;__DEV__&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;__PROFILE__&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;__UMD__&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;__EXPERIMENTAL__&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>在react的入口文件<code>index.js</code>中修改<code>react、react-dom</code>的引入方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//import React from &#x27;react&#x27;;</span><br><span class="hljs-comment">//import ReactDOM from &#x27;react-dom&#x27;;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br></code></pre></td></tr></table></figure></li></ul><h5 id="最后一步：解决报错-‼️"><a href="#最后一步：解决报错-‼️" class="headerlink" title="最后一步：解决报错 ‼️"></a>最后一步：解决报错 ‼️</h5><blockquote><p>⚠️ 注意：这些配置修改仅在17.0.2版本（2021-12-30）有效，不敢保证其他版本通用，如果一通配置后还是无法跑通项目，建议百度谷歌</p></blockquote><ul><li><p>添加 <code>ReactFiberHostConfig</code> 引用</p><ul><li><p>直接修改<code>src/react/packages/react-reconciler/src/ReactFiberHostConfig.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//import invariant from &#x27;shared/invariant&#x27;;</span><br><span class="hljs-comment">// invariant(false, &#x27;This module must be shimmed by a specific renderer.&#x27;);</span><br><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./forks/ReactFiberHostConfig.dom&#x27;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>修改<code>src/react/packages/shared/ReactSharedInternals.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import * as React from &#x27;react&#x27;;</span><br><br><span class="hljs-comment">// const ReactSharedInternals =</span><br><span class="hljs-comment">//   React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactSharedInternals</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../react/src/ReactSharedInternals&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ReactSharedInternals</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改 <code>src/react/packages/shared/invariant.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 加上condition判断</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">invariant</span>(<span class="hljs-params">condition, format, a, b, c, d, e, f</span>) &#123;<br>  <span class="hljs-keyword">if</span> (condition) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<br>    <span class="hljs-string">&#x27;Internal React error: invariant() is meant to be replaced at compile &#x27;</span> +<br>      <span class="hljs-string">&#x27;time. There is no runtime version.&#x27;</span>,<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>修改<code>src/react/.eslintrc.json</code>文件，主要去除<code>extends和plugin</code>的<code>fbjs</code>和<code>react</code><br> <img src="https://raw.githubusercontent.com/dianmaomao/Pic/main/image-20211230145550476.png" alt="image-20211230145550476"></p></li><li><p>另外如果有其他<code>react-internal</code>,找到对应的<code>eslint</code>规则注释一下就好了</p></li></ul><h4 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h4><p>就这样，在一通百度谷歌之后，解决了各种报错问题等疑难杂症之后。我们的调试环境就搭建完成了，可以在 react 源码中通过 <code>debugger</code> 打断点或者 <code>console.log()</code> 输出日志进行愉快地调试了！</p><p><img src="https://raw.githubusercontent.com/dianmaomao/Pic/main/image-20211230150748962.png" alt="image-20211230150748962"></p><p>最后贴一下我搭建的调试环境的 github 地址：<a href="https://github.com/dianmaomao/debug-react">my-debug-react</a>，不想自己搭建调试环境的话可以直接 clone 我搭好的环境使用。</p>]]></content>
    
    
    <categories>
      
      <category>框架-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>增加全局axios拦截器优化项目查询需求</title>
    <link href="/2021/12/02/%E5%A2%9E%E5%8A%A0axios%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BC%98%E5%8C%96%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82/"/>
    <url>/2021/12/02/%E5%A2%9E%E5%8A%A0axios%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BC%98%E5%8C%96%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h3 id="增加全局axios拦截器优化项目查询需求"><a href="#增加全局axios拦截器优化项目查询需求" class="headerlink" title="增加全局axios拦截器优化项目查询需求"></a>增加全局axios拦截器优化项目查询需求</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>项目中配置了DS的autoQuery在每次进入页面都会自动查询（记为第一次查询），用户没等到第一次查询结果返回，手动选择查询条件查询（记为第二次查询）；第二次查询耗时更短先返回数据，第一次后返回。结果是用户查询条件获取的结果被第一次页面自动查询结果覆盖。</p></blockquote><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ul><li>   这应该是所有<code>hzero-front</code>工程化项目的通病，并发请求对于同一数据源会出现覆盖现象，一开始想到了采用<code>Promise.race</code>去解决这个问题，但是这不能保证拿到的数据是正确的，使用<code>axios拦截器</code>的话在一定程度上也能够减少服务器访问降低服务器压力，提高性能</li></ul><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ul><li><h5 id="给Content加loding在autoQuery完成之前不让用户输入查询条件-❌"><a href="#给Content加loding在autoQuery完成之前不让用户输入查询条件-❌" class="headerlink" title="给Content加loding在autoQuery完成之前不让用户输入查询条件 ❌"></a>给Content加<code>loding</code>在autoQuery完成之前不让用户输入查询条件 ❌</h5><p>由于项目的整体结构是<code>Header、Content、Footer</code>结构，所以可以在<code>Content</code>外面加一层<code>Spin</code>，在请求完成期间有一个<code>loding</code>效果查询框等不能输入；这样导致用户不友好于是放弃这个方案</p><img src="https://s2.loli.net/2021/12/21/ONmC42ryLuWaEhG.png" alt="content" style="zoom:50%;" /><img src="https://s2.loli.net/2021/12/21/sHx6ciyLIZU9beB.gif" alt="2021-12-21 15.27.38" style="zoom:50%;" /></li></ul><ul><li><h5 id="修改DS调用接口逻辑，将并发接口调用改成串行调用-❌"><a href="#修改DS调用接口逻辑，将并发接口调用改成串行调用-❌" class="headerlink" title="修改DS调用接口逻辑，将并发接口调用改成串行调用 ❌"></a>修改DS调用接口逻辑，将并发接口调用改成串行调用 ❌</h5><p>翻阅了一下DS源码了解了一下DS查询的大致过程；通过函数调用可以发现每次执行一个请求都是加入到<code>pending</code>的promise队列中，然后并发查询;但是如果要改成串行不太合理，如果接口过慢会导致后续接口<code>pending</code>现象。以下是query调用的过程，大致分析如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// TODO：1.autoquery为true 执行this.query</span><br>     <span class="hljs-keyword">if</span> (autoQuery &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">query</span>();<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (autoCreate &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">records</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>();<br>     &#125;<br>  <br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 查询记录</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> page 页码</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> params 查询参数</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> <span class="hljs-variable">Promise</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-title function_">query</span>(page?: number, params?: object): <span class="hljs-title class_">Promise</span>&lt;any&gt; &#123;<br>   <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 2. this.pending是一个promise队列，promise队列中加入this.doQuery</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">pending</span>.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doQuery</span>(page, params));<br> &#125;<br> <br>   <span class="hljs-keyword">async</span> <span class="hljs-title function_">doQuery</span>(page, params?: object): <span class="hljs-title class_">Promise</span>&lt;any&gt; &#123;<br>   <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 3. doQuery执行查询调用this.read查询 拿到data 返回</span><br>   <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">read</span>(page, params);<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadDataFromResponse</span>(data);<br>   <span class="hljs-keyword">return</span> data;<br> &#125;<br> <br>   <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 3.1 查询</span><br> private <span class="hljs-keyword">async</span> <span class="hljs-title function_">read</span>(<span class="hljs-attr">page</span>: number = <span class="hljs-number">1</span>, params?: object): <span class="hljs-title class_">Promise</span>&lt;any&gt; &#123;<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkReadable</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span>)) &#123;<br>     <span class="hljs-keyword">try</span> &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeStatus</span>(<span class="hljs-title class_">DataSetStatus</span>.<span class="hljs-property">loading</span>);<br>       <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>3.1.1  拿到queryParams 具体要进入this.generateQueryParameter查看</span><br>       <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">generateQueryParameter</span>(params);<br>       <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span>3.1.2 处理生成config 类似axios拦截器内config</span><br>       <span class="hljs-keyword">const</span> newConfig = <span class="hljs-title function_">axiosConfigAdapter</span>(<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-variable language_">this</span>, data, <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">generateQueryString</span>(page));<br>       <span class="hljs-keyword">if</span> (newConfig.<span class="hljs-property">url</span>) &#123;<br>         <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> 如果有url 触发fireEvent，执行ds.query</span><br>         <span class="hljs-keyword">const</span> queryEventResult = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">fireEvent</span>(<span class="hljs-title class_">DataSetEvents</span>.<span class="hljs-property">query</span>, &#123;<br>           <span class="hljs-attr">dataSet</span>: <span class="hljs-variable language_">this</span>,<br>           <span class="hljs-attr">params</span>: newConfig.<span class="hljs-property">params</span>,<br>           <span class="hljs-attr">data</span>: newConfig.<span class="hljs-property">data</span>,<br>         &#125;);<br>         <span class="hljs-keyword">if</span> (queryEventResult) &#123;<br>           <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">axios</span>(<span class="hljs-title function_">fixAxiosConfig</span>(newConfig));<br>           <span class="hljs-title function_">runInAction</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>             <span class="hljs-keyword">if</span> (page &gt;= <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> = page;<br>             &#125;<br>           &#125;);<br>           <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleLoadSuccess</span>(result);<br>         &#125;<br>       &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">handleLoadFail</span>(e);<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSetRequestError</span>(e);<br>     &#125; <span class="hljs-keyword">finally</span> &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">changeStatus</span>(<span class="hljs-title class_">DataSetStatus</span>.<span class="hljs-property">ready</span>);<br>     &#125;<br>   &#125;<br> &#125;<br> <br> <br> <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 从这里可以看出 promise的调用是并发的</span><br> @action<br> <span class="hljs-title function_">fireEvent</span>(<span class="hljs-attr">eventName</span>: string, ...<span class="hljs-attr">rest</span>: any[]): <span class="hljs-title class_">Promise</span>&lt;boolean&gt; &#123;<br>   <span class="hljs-keyword">const</span> <span class="hljs-attr">events</span>: <span class="hljs-title class_">Handler</span>[] | <span class="hljs-literal">undefined</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">events</span>[eventName.<span class="hljs-title function_">toLowerCase</span>()];<br>   <span class="hljs-keyword">return</span> events<br>     ? <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([...events].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">handle</span>) =&gt;</span> <span class="hljs-title function_">callHandler</span>(events, handle, ...rest))).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">all</span> =&gt;</span><br>       all.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> result !== <span class="hljs-literal">false</span>),<br>     )<br>     : <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-literal">true</span>);<br> &#125;<br></code></pre></td></tr></table></figure></li><li><h5 id="使用axios-DS接口特定属性字段对指定接口进行拦截-x2705"><a href="#使用axios-DS接口特定属性字段对指定接口进行拦截-x2705" class="headerlink" title="使用axios+DS接口特定属性字段对指定接口进行拦截 &#x2705;"></a>使用axios+DS接口特定属性字段对指定接口进行拦截 &#x2705;</h5><p>axios前置知识&#x1F449;<a href="https://www.cnblogs.com/1549983239yifeng/p/14271379.html">axios 的拦截器理解与使用</a>；</p><ul><li><p>在<code>/src/utils</code>目录下新建<code>c7nConfig.js</code>文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  Findly &lt;wenbinqiu42@gmail.com&gt;</span><br><span class="hljs-comment"> * @Date: 2021-12-15 16:10:40</span><br><span class="hljs-comment"> * @LastEditors: Findly</span><br><span class="hljs-comment"> * @LastEditTime: 2021-12-17 16:04:21</span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-variable constant_">API_HOST</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/config&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getAccessToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/utils&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; getMenuId &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;utils/menuTab&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; addPending, removePending &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./c7nConfigUtils&#x27;</span>;<br><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; url = <span class="hljs-string">&#x27;&#x27;</span> &#125; = config;<br>    <span class="hljs-keyword">if</span> (url.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;://&#x27;</span>) === -<span class="hljs-number">1</span> &amp;&amp; !url.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;/_api&#x27;</span>)) &#123;<br>      url = <span class="hljs-string">`<span class="hljs-subst">$&#123;API_HOST&#125;</span><span class="hljs-subst">$&#123;url&#125;</span>`</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (config.<span class="hljs-property">blockMutiQuery</span>) &#123; <span class="hljs-comment">// 拿到接口中的blockMutiQuery配置字段</span><br>      <span class="hljs-title function_">removePending</span>(config); <span class="hljs-comment">// 在请求开始前，对之前的请求做检查取消操作</span><br>      <span class="hljs-title function_">addPending</span>(config); <span class="hljs-comment">// 将当前请求添加到 pending 中</span><br>    &#125;<br>    <span class="hljs-comment">// Do something before request is sent</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">MenuId</span> = <span class="hljs-title function_">getMenuId</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">MenuId</span>) &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...config,<br>        url,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          ...config.<span class="hljs-property">headers</span>,<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`bearer <span class="hljs-subst">$&#123;getAccessToken()&#125;</span>`</span>,<br>          <span class="hljs-string">&#x27;H-Menu-Id&#x27;</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;getMenuId()&#125;</span>`</span>,<br>        &#125;,<br>      &#125;;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...config,<br>        url,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          ...config.<span class="hljs-property">headers</span>,<br>          <span class="hljs-title class_">Authorization</span>: <span class="hljs-string">`bearer <span class="hljs-subst">$&#123;getAccessToken()&#125;</span>`</span>,<br>        &#125;,<br>      &#125;;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span><br>    <span class="hljs-comment">// Do something with request error</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求已被取消&#x27;</span>, error)<br>);<br><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; status, data, config &#125; = response;<br>    <span class="hljs-title function_">removePending</span>(config); <span class="hljs-comment">// 在请求结束后，移除本次请求</span><br>    <span class="hljs-keyword">if</span> (status === <span class="hljs-number">204</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (data &amp;&amp; data.<span class="hljs-property">failed</span>) &#123;<br>      <span class="hljs-keyword">throw</span> data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> response;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;请求已被取消&#x27;</span>, err);<br>  &#125;<br>);<br><br></code></pre></td></tr></table></figure></li><li><p>抽离工具方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  Findly &lt;wenbinqiu42@gmail.com&gt;</span><br><span class="hljs-comment"> * @Date: 2021-12-15 16:36:33</span><br><span class="hljs-comment"> * @LastEditors: Findly</span><br><span class="hljs-comment"> * @LastEditTime: 2021-12-21 15:43:30</span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; isEmpty &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><span class="hljs-comment">// 声明一个 Map 用于存储每个请求的标识 和 取消函数</span><br><span class="hljs-keyword">const</span> pending = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">config</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">addPending</span> = config =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isEmpty</span>(config)) &#123;<br>    <span class="hljs-keyword">const</span> urlArr = [config.<span class="hljs-property">method</span>, config.<span class="hljs-property">url</span>];<br>    <span class="hljs-keyword">const</span> url = urlArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>    config.<span class="hljs-property">cancelToken</span> = <span class="hljs-keyword">new</span> axios.<span class="hljs-title class_">CancelToken</span>(<span class="hljs-function"><span class="hljs-params">cancel</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!pending.<span class="hljs-title function_">has</span>(url)) &#123;<br>        <span class="hljs-comment">// 如果 pending 中不存在当前请求，则添加进去</span><br>        pending.<span class="hljs-title function_">set</span>(url, cancel);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 移除请求</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; <span class="hljs-variable">config</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">removePending</span> = config =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isEmpty</span>(config)) &#123;<br>    <span class="hljs-keyword">const</span> urlArr = [config.<span class="hljs-property">method</span>, config.<span class="hljs-property">url</span>];<br>    <span class="hljs-keyword">const</span> url = urlArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (pending.<span class="hljs-title function_">has</span>(url)) &#123;<br>      <span class="hljs-comment">// 如果在 pending 中存在当前请求标识，需要取消当前请求，并且移除</span><br>      <span class="hljs-keyword">const</span> cancel = pending.<span class="hljs-title function_">get</span>(url);<br>      <span class="hljs-title function_">cancel</span>(url);<br>      pending.<span class="hljs-title function_">delete</span>(url);<br>    &#125;<br>  &#125;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 清空 pending 中的请求（在路由跳转时调用）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">clearPending</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [url, cancel] <span class="hljs-keyword">of</span> pending) &#123;<br>    <span class="hljs-title function_">cancel</span>(url);<br>  &#125;<br>  pending.<span class="hljs-title function_">clear</span>();<br>&#125;;<br><span class="hljs-keyword">export</span> &#123; addPending, removePending, clearPending &#125;;<br><br></code></pre></td></tr></table></figure></li><li><p>在根文件夹的<code>app.tsx</code>中引入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//app.tsx</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">dvaAppInit</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils/c7nConfig&#x27;</span>);<br>&#125;;  <br></code></pre></td></tr></table></figure></li><li><p>在需要拦截的DS接口中增加<code>blockMutiQuery</code>字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">transport</span>: &#123;<br>    <span class="hljs-attr">read</span>: <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> url = <span class="hljs-string">`<span class="hljs-subst">$&#123;SRM_MDM&#125;</span>/v1/<span class="hljs-subst">$&#123;organizationId&#125;</span>/uniqlo-item/req`</span>;<br>      <span class="hljs-keyword">const</span> allParams = &#123;<br>        ...config.<span class="hljs-property">data</span>,<br>        ...config.<span class="hljs-property">data</span>.<span class="hljs-property">creationDate</span>,<br>      &#125;;<br>      <span class="hljs-keyword">const</span> &#123; creationDate, creator, ...queryParams &#125; = allParams;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(queryParams).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> value = queryParams[key];<br>        <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span> || value === <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">delete</span> queryParams[key];<br>        &#125;<br>      &#125;);<br>      <span class="hljs-keyword">const</span> axiosConfig = &#123;<br>        ...config,<br>        <span class="hljs-attr">data</span>: queryParams,<br>        url,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">blockMutiQuery</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 增加取消多次查询字段</span><br>      &#125;;<br>      <span class="hljs-keyword">return</span> axiosConfig;<br>    &#125;,<br>  &#125;,<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://s2.loli.net/2021/12/21/YAenRUtTNGrbhBw.gif" alt="2021-12-21 16.11.27"></p><img src="https://s2.loli.net/2021/12/21/LKyV8HImXOk9geC.gif" alt="2021-12-21 16.17.12" style="zoom:50%;" /><p>使用<code>axios拦截器</code>+DS特定字段对特定接口做拦截操作能够达到需求目的，但是可以看到把Table的loading给干掉了这一点还需要优化</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0到1实现一个promise</title>
    <link href="/2021/11/20/%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/"/>
    <url>/2021/11/20/%E4%BB%8E0%E5%88%B01%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/</url>
    
    <content type="html"><![CDATA[<h3 id="从0到1实现一个Promise"><a href="#从0到1实现一个Promise" class="headerlink" title="从0到1实现一个Promise"></a>从0到1实现一个Promise</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><blockquote><p>Promise 是异步编程的一种解决方案,简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理—摘抄自《<a href="https://es6.ruanyifeng.com/">ECMAScript 6 入门</a>》</p></blockquote><ul><li><h5 id="三个状态"><a href="#三个状态" class="headerlink" title="三个状态"></a>三个状态</h5><ul><li><code>pending(进行中)</code></li><li><code>fulfilled(已完成)</code></li><li><code>rejected(已失败)</code></li></ul><p>这三种状态只能从<code>pending</code>到<code>fulfilled</code>或者<code>rejected</code>，一旦状态发生了改变，则不会再改变；且状态的改变只能由执行器函数中的<code>resolve和reject</code>改变。</p></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li><h5 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h5><blockquote><p>返回一个成功或者失败的promise对象</p></blockquote><ul><li><p>传入一个<code>非promise对象</code>,得到一个成功的promise对象，且值为传入的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;fulfilled&gt;: 123&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise</span><br><span class="hljs-comment">[[PromiseState]]: &quot;fulfilled&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: 123</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>传入一个<code>成功的promise对象</code>,得到一个成功的promise对象，且值为传入promise对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;邱文斌&#x27;</span>);<br>    &#125;)<br>  );<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;fulfilled&gt;: &#x27;邱文斌&#x27;&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise</span><br><span class="hljs-comment">[[PromiseState]]: &quot;fulfilled&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: &quot;邱文斌&quot;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>传入一个<code>失败的promise对象</code>,得到一个失败的promise对象，且值为传入promise对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;邱文斌&#x27;</span>);<br>    &#125;)<br>  );<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;rejected&gt;: &#x27;邱文斌&#x27;&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise</span><br><span class="hljs-comment">[[PromiseState]]: &quot;rejected&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: &quot;邱文斌&quot;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h5><blockquote><p>返回一个失败的promise对象</p></blockquote><ul><li><p>传入一个<code>非promise对象</code>,得到一个失败的promise对象，且值为传入的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">123</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;rejected&gt;: 123&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise</span><br><span class="hljs-comment">[[PromiseState]]: &quot;rejected&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: 123</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>传入一个<code>promise对象</code>,都是得到一个失败的promise对象，且值为传入promise对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br>  &#125;)<br>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><br>--------------<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-title function_">reject</span>(<span class="hljs-number">123</span>)<br>  &#125;)<br>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)<br><br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h5><blockquote><p>返回一个新的promise对象，只有所有promise都成功才成功，只有一个失败就直接失败</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">456</span>);<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><br><span class="hljs-comment">// 得到p为失败的promise对象</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;pending&gt;&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise</span><br><span class="hljs-comment">[[PromiseState]]: &quot;rejected&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: 123</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">456</span>);<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">789</span>);<br><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><span class="hljs-comment">// 得到一个成功的promise,结果为数组</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Promise &#123;&lt;pending&gt;&#125;</span><br><span class="hljs-comment">[[Prototype]]: Promise[[PromiseState]]: &quot;fulfilled&quot;</span><br><span class="hljs-comment">[[PromiseResult]]: Array(3)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><blockquote><p>返回一个新的promise，第一个完成的promise的结果状态就是最终结果状态</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">456</span>);<br><span class="hljs-keyword">const</span> p3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">789</span>);<br><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1, p2, p3]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><span class="hljs-comment">// p1是最先完成的 所以p的结果是p1的结果</span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="关键问题梳理-x2757"><a href="#关键问题梳理-x2757" class="headerlink" title="关键问题梳理 &#x2757;"></a>关键问题梳理 &#x2757;</h4><ul><li><h5 id="如何改变promise状态？"><a href="#如何改变promise状态？" class="headerlink" title="如何改变promise状态？"></a>如何改变promise状态？</h5><ul><li>resolve(value):当前状态从<code>pending</code>变为<code>fulfilled</code></li><li>reject(reason):当前状态从<code>pending</code>变为<code>rejected</code></li></ul></li><li><h5 id="一个promise指定多个成功-失败回调函数都会回调吗？"><a href="#一个promise指定多个成功-失败回调函数都会回调吗？" class="headerlink" title="一个promise指定多个成功/失败回调函数都会回调吗？"></a>一个promise指定多个成功/失败回调函数都会回调吗？</h5><p>当promise状态改变时都会调用回调函数</p></li><li><h5 id="改变promise状态和指定回调函数谁先谁后？"><a href="#改变promise状态和指定回调函数谁先谁后？" class="headerlink" title="改变promise状态和指定回调函数谁先谁后？"></a>改变promise状态和指定回调函数谁先谁后？</h5><p>都有可能，正常情况下是先指定回调再改变状态，但是也可以先改变状态再指定回调</p><ul><li><h5 id="如何先改状态再执行回调？"><a href="#如何先改状态再执行回调？" class="headerlink" title="如何先改状态再执行回调？"></a>如何先改状态再执行回调？</h5><ul><li>在Promise的执行器函数中直接执行<code>resolve/reject函数</code></li><li>延迟更长时间再调用<code>then()</code></li></ul></li><li><h5 id="什么时候才能得到数据？"><a href="#什么时候才能得到数据？" class="headerlink" title="什么时候才能得到数据？"></a>什么时候才能得到数据？</h5><ul><li>如果先指定的回调，那当状态发生改变时，回调函数就会调用得到数据</li><li>如果先改变状态，当指定回调函数时，回调函数就会调用得到数据</li></ul></li></ul></li><li><h5 id="promise-then-返回的新promise对象的结果状态由什么决定？"><a href="#promise-then-返回的新promise对象的结果状态由什么决定？" class="headerlink" title="promise.then()返回的新promise对象的结果状态由什么决定？"></a>promise.then()返回的新promise对象的结果状态由什么决定？</h5><ul><li>如果抛出异常，新promise变为<code>rejected</code>，reason为抛出的异常</li><li>如果返回的是非promise的任意值，新promise变为<code>resolved</code>,value为返回的值</li><li>如果返回的是一个新的promise对象，此promise对象的结果就成为了promise.then返回xinpromise对象的结果</li></ul></li><li><h5 id="如何中断Promise链"><a href="#如何中断Promise链" class="headerlink" title="如何中断Promise链"></a>如何中断Promise链</h5><ul><li><p>在回调函数中返回一个<code>pending状态</code>的promise则会中断promise的链式调用，因为只有状态改变了回到函数才会调用，<code>pending状态</code>的promise不会调用回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 异步调用</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 再次异步调用,想在这中断下一个then调用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;)   <span class="hljs-comment">// 返回一个pending状态的promise实例对象，即中断promise调用</span><br>    <br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span>=&gt;</span>&#123;<br>    <br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>如何中断<code>fetch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果需要中断一个 fetch() 操作，只需从一个 AbortController 对象获取 signal，并将这个信号对象作为 fetch() 的选项传入。大概就是这样：</span><br><br><span class="hljs-keyword">const</span> ac = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-keyword">const</span> &#123;signal&#125; = ac;<br><span class="hljs-title function_">fetch</span>(url, &#123;signal&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                              <br>    <span class="hljs-comment">// TODO 处理业务</span><br>    &#125;);<br><br><span class="hljs-comment">// 1 秒后取消 fetch 操作</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> ac.<span class="hljs-title function_">abort</span>(), <span class="hljs-number">1000</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ac.abort() 会向 signal 发送信号，触发它的 abort 事件，并将其.aborted 属性置为 true。fetch() 内部处理会利用这些信息中止掉请求。</span><br><span class="hljs-comment">上面这个示例演示了如何实现fetch() 操作的超时处理。如果使用 await 的形式来处理，需要把setTimeout(...) 放在fetch(...) 之前：</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">const</span> ac = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-keyword">const</span> &#123;signal&#125; = ac;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> ac.<span class="hljs-title function_">abort</span>(), <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;signal&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-literal">undefined</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Promise实现"><a href="#Promise实现" class="headerlink" title="Promise实现"></a>Promise实现</h4><blockquote><p>我们要手写一个<code>Promise</code>，那么我们就要遵循 <a href="https://promisesaplus.com/">Promise/A+</a> 规范，业界所有 Promise 的类库都遵循这个规范。 Promise/A+ 规范对如何实现一个符合标准的 Promise 类库阐述的很详细。</p></blockquote><ol><li>promise 有三个状态：<code>pending</code>，<code>fulfilled</code>，or <code>rejected</code>；「规范   Promise/A+ 2.1」</li><li><code>new promise</code>时， 需要传递一个<code>executor()</code>执行器，执行器立即执行；</li><li><code>executor</code>接受两个参数，分别是<code>resolve</code>和<code>reject</code>；</li><li>promise 的默认状态是 <code>pending</code>；</li><li>promise 有一个<code>value</code>保存成功状态的值，可以是<code>undefined/thenable/promise</code>；「规范 Promise/A+ 1.3」</li><li>promise 有一个<code>reason</code>保存失败状态的值；「规范 Promise/A+ 1.5」</li><li>promise 只能从<code>pending</code>到<code>rejected</code>, 或者从<code>pending</code>到<code>fulfilled</code>，状态一旦确认，就不会再改变；</li><li>promise 必须有一个<code>then</code>方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected；「规范 Promise/A+ 2.2」</li><li>如果调用 then 时，promise 已经成功，则执行<code>onFulfilled</code>，参数是<code>promise</code>的<code>value</code>；</li><li>如果调用 then 时，promise 已经失败，那么执行<code>onRejected</code>, 参数是<code>promise</code>的<code>reason</code>；</li><li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调<code>onRejected</code>；</li></ol><h5 id="普通版本"><a href="#普通版本" class="headerlink" title="普通版本"></a>普通版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Promise</span>(<span class="hljs-params">executor</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;pending&#x27;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">callbacks</span> = []; <span class="hljs-comment">// 保存pending回调函数</span><br><span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">data</span>) &#123;<br><span class="hljs-keyword">if</span> (self.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br><span class="hljs-comment">// 1.修改对象状态</span><br>self.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;<br><span class="hljs-comment">// 2.设置对象结果</span><br>self.<span class="hljs-property">PromiseResult</span> = data;<br><span class="hljs-comment">// 3.如果是异步 则遍历callbacks依次执行保存的回调函数</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> &#123;<br>i.<span class="hljs-title function_">onResolved</span>(data);<br>&#125;);<br>&#125;);<br>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-keyword">if</span> (self.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br><span class="hljs-comment">// 1.修改对象状态</span><br>self.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;rejected&#x27;</span>;<br><span class="hljs-comment">// 2.设置对象结果</span><br>self.<span class="hljs-property">PromiseResult</span> = reason;<br><span class="hljs-comment">// 3.如果是异步, 则遍历callbacks依次执行保存的回调函数,也要用setTimeout保证是异步执行</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>self.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> &#123;<br>i.<span class="hljs-title function_">onRejected</span>(reason);<br>&#125;);<br>&#125;);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 同步调用执行器函数</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-title function_">executor</span>(resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">reject</span>(error);<br>&#125;<br>&#125;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">then</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onResolved, onRejected</span>) &#123;<br><span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>onResolved = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> value;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-comment">// catch 透传 如果then没传第二个参数就给默认值</span><br>onRejected = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">throw</span> reason;<br>&#125;;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 状态为成功</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">type</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 获取回到函数执行的结果</span><br><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">type</span>(self.<span class="hljs-property">PromiseResult</span>);<br><span class="hljs-comment">// 判断结果</span><br><span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>result.<span class="hljs-title function_">then</span>(<br><span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">resolve</span>(v);<br>&#125;,<br><span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> <span class="hljs-title function_">reject</span>(r)<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">resolve</span>(result);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">reject</span>(error);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br><span class="hljs-comment">// 因为then方法属于微任务 异步执行，所以要加上setTimeout修改它的执行顺序</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">callback</span>(onResolved);<br>&#125;);<br>&#125;<br><span class="hljs-comment">// 状态为失败</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-title function_">callback</span>(onRejected);<br>&#125;);<br>&#125;<br><span class="hljs-comment">// 状态为pending 处理异步任务setTimeout(()=&gt;resolve)</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br><span class="hljs-comment">// 保存回调函数</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">onResolved</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">callback</span>(onResolved);<br>&#125;,<br><span class="hljs-attr">onRejected</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">callback</span>(onRejected);<br>&#125;,<br>&#125;);<br>&#125;<br>&#125;);<br>&#125;;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">catch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">onRejected</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">undefined</span>, onRejected);<br>&#125;;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">resolve</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>value.<span class="hljs-title function_">then</span>(<br><span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> <span class="hljs-title function_">resolve</span>(res),<br><span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title function_">reject</span>(err)<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">resolve</span>(value);<br>&#125;<br>&#125;);<br>&#125;;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">reject</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">reject</span>(reason);<br>&#125;);<br>&#125;;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promiseArr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 都成功 则成功</span><br><span class="hljs-keyword">let</span> len = promiseArr.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 计数</span><br><span class="hljs-keyword">let</span> result = []; <span class="hljs-comment">// 结果数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>promiseArr[i].<span class="hljs-title function_">then</span>(<br><span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>result[i] = res;<br>count++;<br><span class="hljs-comment">// 从这里得知是成功</span><br><span class="hljs-keyword">if</span> (count === len) &#123;<br><span class="hljs-title function_">resolve</span>(result);<br>&#125;<br>&#125;,<br><span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">reject</span>(err);<br>&#125;<br>);<br>&#125;<br>&#125;);<br>&#125;;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">race</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">promiseArr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> len = promiseArr.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-comment">// 谁先改变状态 就决定结果</span><br>promiseArr[i].<span class="hljs-title function_">then</span>(<br><span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">resolve</span>(res);<br>&#125;,<br><span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-title function_">reject</span>(err);<br>&#125;<br>);<br>&#125;<br>&#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h5 id="Class-版本"><a href="#Class-版本" class="headerlink" title="Class 版本"></a>Class 版本</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&#x27;PENDING&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FULFILLED</span> = <span class="hljs-string">&#x27;FULFILLED&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&#x27;REJECTED&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolvePromise</span> = (<span class="hljs-params">promise2, x, resolve, reject</span>) =&gt; &#123;<br><span class="hljs-comment">// 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1</span><br><span class="hljs-keyword">if</span> (promise2 === x) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>));<br>&#125;<br><span class="hljs-comment">// Promise/A+ 2.3.3.3.3 只能调用一次</span><br><span class="hljs-keyword">let</span> called;<br><span class="hljs-comment">// 后续的条件要严格判断 保证代码能和别的库一起使用</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; x != <span class="hljs-literal">null</span>) || <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span><br><span class="hljs-keyword">let</span> then = x.<span class="hljs-property">then</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> then === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-comment">// 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span><br>then.<span class="hljs-title function_">call</span>(<br>x,<br><span class="hljs-function">(<span class="hljs-params">y</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 根据 promise 的状态决定是成功还是失败</span><br><span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>called = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span><br><span class="hljs-title function_">resolvePromise</span>(promise2, y, resolve, reject);<br>&#125;,<br><span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 只要失败就失败 Promise/A+ 2.3.3.3.2</span><br><span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>called = <span class="hljs-literal">true</span>;<br><span class="hljs-title function_">reject</span>(r);<br>&#125;<br>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span><br><span class="hljs-title function_">resolve</span>(x);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">// Promise/A+ 2.3.3.2</span><br><span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>called = <span class="hljs-literal">true</span>;<br><span class="hljs-title function_">reject</span>(e);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4</span><br><span class="hljs-title function_">resolve</span>(x);<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PENDING</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span> = [];<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span> = [];<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">FULFILLED</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">reason</span>) =&gt; &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">REJECTED</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = reason;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>());<br>&#125;<br>&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-title function_">executor</span>(resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br><span class="hljs-title function_">reject</span>(error);<br>&#125;<br>&#125;<br><br><span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br><span class="hljs-comment">//解决 onFufilled，onRejected 没有传值的问题</span><br><span class="hljs-comment">//Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span><br>onFulfilled = <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v;<br><span class="hljs-comment">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span><br>onRejected =<br><span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span><br>? onRejected<br>: <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">throw</span> err;<br>  &#125;;<br><span class="hljs-comment">// 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span><br><span class="hljs-keyword">let</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">FULFILLED</span>) &#123;<br><span class="hljs-comment">//Promise/A+ 2.2.2</span><br><span class="hljs-comment">//Promise/A+ 2.2.4 --- setTimeout</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//Promise/A+ 2.2.7.1</span><br><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br><span class="hljs-comment">// x可能是一个proimise</span><br><span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-comment">//Promise/A+ 2.2.7.2</span><br><span class="hljs-title function_">reject</span>(e);<br>&#125;<br>&#125;, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">REJECTED</span>) &#123;<br><span class="hljs-comment">//Promise/A+ 2.2.3</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br><span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-title function_">reject</span>(e);<br>&#125;<br>&#125;, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br><span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-title function_">reject</span>(e);<br>&#125;<br>&#125;, <span class="hljs-number">0</span>);<br>&#125;);<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br><span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><span class="hljs-title function_">reject</span>(e);<br>&#125;<br>&#125;, <span class="hljs-number">0</span>);<br>&#125;);<br>&#125;<br>&#125;);<br><br><span class="hljs-keyword">return</span> promise2;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试Promise是否符合规范"><a href="#测试Promise是否符合规范" class="headerlink" title="测试Promise是否符合规范"></a>测试Promise是否符合规范</h4><blockquote><p>Promise/A+规范提供了一个专门的测试脚本，可以测试所编写的代码是否符合Promise/A+的规范。</p></blockquote><ul><li><p>首先在promise代码中加入如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Promise/A+规范测试</span><br><span class="hljs-comment"> * 1.npm i -g promises-aplus-tests // 安装依赖</span><br><span class="hljs-comment"> * 2.promises-aplus-tests Promise.js // promises-aplus-tests 执行当期promise文件</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">deferred</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 延迟对象</span><br><span class="hljs-keyword">let</span> defer = &#123;&#125;;<br>defer.<span class="hljs-property">promise</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>defer.<span class="hljs-property">resolve</span> = resolve;<br>defer.<span class="hljs-property">reject</span> = reject;<br>&#125;);<br><span class="hljs-keyword">return</span> defer;<br>&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Promise</span>;<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>完美通过测试的class版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PENDING</span> = <span class="hljs-string">&#x27;PENDING&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FULFILLED</span> = <span class="hljs-string">&#x27;FULFILLED&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REJECTED</span> = <span class="hljs-string">&#x27;REJECTED&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">resolvePromise</span> = (<span class="hljs-params">promise2, x, resolve, reject</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.1</span><br>  <span class="hljs-keyword">if</span> (promise2 === x) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))<br>  &#125;<br>  <span class="hljs-comment">// Promise/A+ 2.3.3.3.3 只能调用一次</span><br>  <span class="hljs-keyword">let</span> called;<br>  <span class="hljs-comment">// 后续的条件要严格判断 保证代码能和别的库一起使用</span><br>  <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; x != <span class="hljs-literal">null</span>) || <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;function&#x27;</span>) &#123; <br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span><br>      <span class="hljs-keyword">let</span> then = x.<span class="hljs-property">then</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> then === <span class="hljs-string">&#x27;function&#x27;</span>) &#123; <br>        <span class="hljs-comment">// 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span><br>        then.<span class="hljs-title function_">call</span>(x, <span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> &#123; <span class="hljs-comment">// 根据 promise 的状态决定是成功还是失败</span><br>          <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>          called = <span class="hljs-literal">true</span>;<br>          <span class="hljs-comment">// 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span><br>          <span class="hljs-title function_">resolvePromise</span>(promise2, y, resolve, reject); <br>        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 只要失败就失败 Promise/A+ 2.3.3.3.2</span><br>          <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>          called = <span class="hljs-literal">true</span>;<br>          <span class="hljs-title function_">reject</span>(r);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span><br>        <span class="hljs-title function_">resolve</span>(x);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      <span class="hljs-comment">// Promise/A+ 2.3.3.2</span><br>      <span class="hljs-keyword">if</span> (called) <span class="hljs-keyword">return</span>;<br>      called = <span class="hljs-literal">true</span>;<br>      <span class="hljs-title function_">reject</span>(e)<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4  </span><br>    <span class="hljs-title function_">resolve</span>(x)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">PENDING</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span> = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>= [];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">resolve</span> = (<span class="hljs-params">value</span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> ===  <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">FULFILLED</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span>=&gt;</span><span class="hljs-title function_">fn</span>());<br>      &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">reject</span> = (<span class="hljs-params">reason</span>) =&gt; &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> ===  <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> = <span class="hljs-variable constant_">REJECTED</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span> = reason;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span>=&gt;</span><span class="hljs-title function_">fn</span>());<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-title function_">executor</span>(resolve,reject)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>) &#123;<br>    <span class="hljs-comment">//解决 onFufilled，onRejected 没有传值的问题</span><br>    <span class="hljs-comment">//Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span><br>    onFulfilled = <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br>    <span class="hljs-comment">//因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span><br>    onRejected = <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span> ? onRejected : <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err &#125;;<br>    <span class="hljs-comment">// 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span><br>    <span class="hljs-keyword">let</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">FULFILLED</span>) &#123;<br>        <span class="hljs-comment">//Promise/A+ 2.2.2</span><br>        <span class="hljs-comment">//Promise/A+ 2.2.4 --- setTimeout</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//Promise/A+ 2.2.7.1</span><br>            <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>            <span class="hljs-comment">// x可能是一个proimise</span><br>            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>          &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-comment">//Promise/A+ 2.2.7.2</span><br>            <span class="hljs-title function_">reject</span>(e)<br>          &#125;<br>        &#125;, <span class="hljs-number">0</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">REJECTED</span>) &#123;<br>        <span class="hljs-comment">//Promise/A+ 2.2.3</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>            <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>          &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-title function_">reject</span>(e)<br>          &#125;<br>        &#125;, <span class="hljs-number">0</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-variable constant_">PENDING</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onFulfilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>              <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject);<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>              <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>          &#125;, <span class="hljs-number">0</span>);<br>        &#125;);<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-keyword">let</span> x = <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>              <span class="hljs-title function_">resolvePromise</span>(promise2, x, resolve, reject)<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>              <span class="hljs-title function_">reject</span>(e)<br>            &#125;<br>          &#125;, <span class="hljs-number">0</span>);<br>        &#125;);<br>      &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> promise2;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-property">deferred</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// 延迟对象</span><br><span class="hljs-keyword">let</span> defer = &#123;&#125;;<br>defer.<span class="hljs-property">promise</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>defer.<span class="hljs-property">resolve</span> = resolve;<br>defer.<span class="hljs-property">reject</span> = reject;<br>&#125;);<br><span class="hljs-keyword">return</span> defer;<br>&#125;;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Promise</span>;<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/20/m917iIgxvGXABLh.png" alt="image-20211220160150616"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx+docker+jenkins自动化构建部署前端项目</title>
    <link href="/2021/11/08/nginx+docker+jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    <url>/2021/11/08/nginx+docker+jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>双十一搞活动买了一个服务器，正好也借此来学习学习一个项目如何自动化构建部署前端项目。</p><p>实现目标：本地push代码到GitHub，Webhook自动触发jenkins上的构建动作,完成安装node插件并且打包自动部署到nginx服务器上。能立即看到页面效果</p></blockquote><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>github账号和项目</li><li>阿里云服务器</li><li>服务器安装nginx并且启动</li><li>服务器安装docker并且启动</li><li>docker安装jenkins并且启动</li></ul><h3 id="一、前置工作"><a href="#一、前置工作" class="headerlink" title="一、前置工作"></a>一、前置工作</h3><ul><li><p>登录服务器更新系统软件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ yum update<br></code></pre></td></tr></table></figure></li><li><p>安装java和git</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ yum install java<br>$ yum install git<br></code></pre></td></tr></table></figure></li><li><p>安装nginx</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ yum install nginx<br>$ service nginx <span class="hljs-built_in">start</span> // 启动nginx服务<br></code></pre></td></tr></table></figure><p>出现<code>Redirecting to /bin/systemctl start nginx.service</code>则说明<code>nginx</code>安装成功了，访问<code>http://你的公网ip/ </code> (<code>nginx</code>默认启动的是<code>80</code>端口，所以可以不需要修改),如果出现了<code>nginx</code>默认的欢迎画面则证明安装成功了。</p><p><img src="https://i.loli.net/2021/11/09/8YSUvsCxOFHqGJN.png" alt="image-20211109194216776"></p></li><li><p>安装docker</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun<br><br>$ sudo systemctl <span class="hljs-built_in">start</span> docker // 启动docker服务<br></code></pre></td></tr></table></figure></li><li><p>docker安装最新jenkins镜像</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker pull jenkins/jenkins:lts<br><br>//完成之后输入如下命令查看镜像<br>docker images<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/09/29QSCOmwuhVG6aJ.png" alt="image-20211109194905523"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">// 继续执行如下命令 创建一个容器。容器就是一台虚拟机<br>// docker run -name [名称] 创建一个容器名称<br>// -itd 表示后台运行<br>// -v /home/react : /var/jenkins_home  将宿主机目录 跟 容器内目录做一个映射，<br>// -p <span class="hljs-number">8081</span>:<span class="hljs-number">8080</span> jenkins/jenkins:lts 将宿主机端口跟容器端口做一个映射，使用安装的jenkins镜像<br>docker run --name react_jenkins -itd -v /home/react:/var/jenkins_home -p <span class="hljs-number">8080</span>:<span class="hljs-number">8080</span> jenkins/jenkins:lts<br><br>// 可以通过 docker ps | grep【容器名】 来查看容器信息<br>docker ps | grep react_jenkins<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/09/fH1rqoYj6bniLST.png" alt="image-20211109195608302"></p></li><li><p>浏览器输入<code>ip:8080</code>即可进入jenkins工作台</p></li></ul><h3 id="二、配置jenkins"><a href="#二、配置jenkins" class="headerlink" title="二、配置jenkins"></a>二、配置jenkins</h3><ul><li><p>第一步会让输入jenkins管理员密码，因为我们是容器内安装的jenkins，所以我们要进入到容器内部，查看jenkins密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">docker exec -it  react_jenkins /bin/bash<br></code></pre></td></tr></table></figure><p>出现了如下画面<code>jenkins</code>开头的就说明进入了容器内部：</p><p><img src="https://i.loli.net/2021/11/09/iOcWXZq5fxus3aJ.png" alt="image-20211109200453085"></p></li><li><p>根据网页中提示找到密码输入后，使用推荐安装就行了</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRNQpor2DVnHiaa4bFUoYI1eOvUH1QgLtALDuqk9hER7YQD7OdVzoUtTl0A4qBq1yib0sQG5SiavuyWw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p></li><li><p>安装Node插件并配置Node</p><p>因为我们的项目是要用到node打包的，所以先在jenkins中安装nodeJs插件，安装后进入全局工具配置，配置一个我们要用到的node版本。（因为<code>create-react-app</code>创建的react的项目使用最新的node版本会报错，所以选择<code>14.15.0</code>版本）</p><p><img src="https://i.loli.net/2021/11/09/bYtQVUBfjl4gJF2.png" alt="image-20211109202843444"></p></li><li><p>JDK&amp;GIT安装（选择自动安装）：自动安装JDK需要oracle账号，可以自行注册</p><p><img src="https://i.loli.net/2021/11/09/Trx3jHitlY8mq9h.png" alt="image-20211109203041357"></p><p><img src="https://i.loli.net/2021/11/09/OmKcJsfIaXD7PNZ.png" alt="image-20211109203136703"></p></li><li><p>系统配置<code>GitHub服务器</code></p><p>​    <img src="https://i.loli.net/2021/11/09/Ba2O69SqRyWFPjJ.png" alt="image-20211109203719824"></p><ul><li><p>这里有两点需要注意，这里的<code>github服务器凭据</code>需要选择<code>Secret text</code>，并把<code>github</code>的个人设置中找到<code>Developer settings</code>中找到<code>Personal access tokens</code> 填入其中，在点击<code>连接测试</code>，出现了<code>Credentials verified for user xxxx</code>则证明配置成功了</p><p><img src="https://i.loli.net/2021/11/09/NB8UI4XgvoQOnJj.png" alt="image-20211109203535991"></p></li><li><p>3、勾选管理<code>hook</code>并再第4步中复制<code>hook</code>链接粘贴到项目的<code>webhook</code>中</p><p><img src="https://i.loli.net/2021/11/09/vZbkLhBmYC8luVF.png" alt="image-20211109204036468"></p><p><img src="../Library/Application%20Support/typora-user-images/image-20211109204128148.png" alt="image-20211109204128148"></p></li></ul></li><li><p>新建一个任务,按步骤操作即可</p><p><img src="https://i.loli.net/2021/11/10/oQRsuk8Iq9eTKDC.png" alt="image-20211110102420316"></p><ul><li><p>接下来再按步骤配置好任务的<code>源码地址</code>，构建触发器选择<code>hook</code>，构建环境选择Node，构建选择执行shell命令</p><p><img src="https://i.loli.net/2021/11/10/Pkn78vmj2FEZTHI.png" alt="image-20211110102850808"></p></li></ul></li></ul><h3 id="三、修改nginx配置"><a href="#三、修改nginx配置" class="headerlink" title="三、修改nginx配置"></a>三、修改nginx配置</h3><ul><li><p>修改nginx.conf配置目录到打包后的路径(路径为宿主服务器的映射目录就行了，因为容器映射到了宿主机的目录，打包后的产出都在那)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/home/react/workspace/react_demo/build/ <br></code></pre></td></tr></table></figure></li></ul><p><img src="https://i.loli.net/2021/11/10/6YAEwHUQxN4nozS.png" alt="image-20211110103501427"></p><h3 id="四、验证效果"><a href="#四、验证效果" class="headerlink" title="四、验证效果"></a>四、验证效果</h3><ul><li>用<code>create-react-app</code>脚手架创建一个react项目，修改内部push到github仓库</li></ul><p><img src="https://i.loli.net/2021/11/10/SawzBb6AHqhmGNx.png" alt="image-20211110103940997"></p><ul><li><p>可以通过<code>Github hook log</code>查看日志，看是否触发了<code>webhook钩子</code></p><p><img src="https://i.loli.net/2021/11/10/EzarukehZjJYcXl.png" alt="image-20211110104215220"></p><p><img src="https://i.loli.net/2021/11/10/vyizReqJ6apk7To.png" alt="image-20211110104954660"></p></li><li><p>验证效果，完美~~</p><p><img src="https://i.loli.net/2021/11/10/WItVK7B2UwM5PHS.png" alt="image-20211110105129875"></p></li></ul><h3 id="五、问题总结"><a href="#五、问题总结" class="headerlink" title="五、问题总结"></a>五、问题总结</h3><blockquote><p>本次利用nginx+docker+jenkins做的自动化构建部署前端项目比较简单，适合个人使用，如果是公司的自动化构建部署会涉及到增量编译构建，不需要每次都yarn生成node_modules，依赖不变可以做一个缓存使用，加快构建速度，还会将构建产出做个转移发布，我在这里直接用nginx部署了build目录等待。自动化构建部署仍然需要深入学习。加油💪🏻</p></blockquote><ul><li><p>在docker创建容器的时候，映射了宿主机：容器目录，但是构建完成之后，宿主机目录没有构建后的产出，需要在宿主机的映射目录修改权限</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sudo chown -R <span class="hljs-number">1000</span> 【目录】<br></code></pre></td></tr></table></figure></li><li><p>一开始给容器映射的端口号是<code>8081:8080</code>，如果要修改端口映射，需要修改docker容器的hostconfig.json，并且要先停止容器、停止docker服务</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><br><span class="hljs-built_in">cd</span> /var/lib/docker/containers/d00254ce3af7*     #这里是CONTAINER ID<br><br><br>vim hostconfig.json  #修改hostconfig文件<br><br>#如果之前没有端口映射, 应该有这样的一段:<br>&quot;PortBindings&quot;:&#123;&#125;<br> <br>#增加一个映射, 这样写:<br>&quot;PortBindings&quot;:&#123;&quot;<span class="hljs-number">8080</span>/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;<span class="hljs-number">8080</span>&quot;&#125;]&#125;<br>#前一个数字是容器端口, 后一个是宿主机端口。将宿主机的<span class="hljs-number">8080</span>端口映射到容器的<span class="hljs-number">8080</span>端口<br>#而修改现有端口映射更简单, 把端口号改掉就行。<br></code></pre></td></tr></table></figure></li><li><p>命令的不熟悉，以及命令含义不熟悉，多百度多动手尝试，可以用到的一些命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk">Docker 命令<br><br><br>Lunix删除文件夹命令： rm -rf 【文件夹名称】<br><br><br><br><br>启动<br><br>启动docker容器：docker start 【容器id】<br><br><br>查看信息<br><br>查看所有docker镜像: docker images<br><br>查看镜像信息： docker logs -f 【容器名】<br><br>查看容器服务: docker ps | grep 【容器名】<br><br>查看docker启动容器：docker ps -a 查看所有容器<br><br>进入docker容器内部：docker exec -it 【容器名】  <span class="hljs-regexp">/bin/</span>bash   ——&gt; docker exec -it  react_jenkins <span class="hljs-regexp">/bin/</span>bash<br><br>退出容器命令： <span class="hljs-keyword">exit</span><br><br>删除<br><br>删除容器： docker rm 【容器id】<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React知识链路总结-下</title>
    <link href="/2021/09/29/React%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%8B/"/>
    <url>/2021/09/29/React%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="React15的栈调和"><a href="#React15的栈调和" class="headerlink" title="React15的栈调和"></a>React15的栈调和</h4><ul><li><h5 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h5><ul><li>Reconciler（协调器）—— 负责找出变化的组件；</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上；</li></ul></li><li><h5 id="调和过程和Diff算法"><a href="#调和过程和Diff算法" class="headerlink" title="调和过程和Diff算法"></a>调和过程和Diff算法</h5><p>Virtual DOM 是一种编程概念，在这个概念里，UI是一个种理想化的，或者说<code>虚拟的</code>表现形式被保存在内存中，并通过ReactDOM等类库使之与真实DOM同步，这一过程叫<code>协调（调和）</code>：即将虚拟DOM映射成真实DOM的过程</p><p>调和是<code>使一致</code>的过程：包括组件的挂载、卸载、更新等过程</p><p>Diff是<code>找不同</code>的过程</p></li><li><h5 id="Diff算法的设计思想"><a href="#Diff算法的设计思想" class="headerlink" title="Diff算法的设计思想"></a>Diff算法的设计思想</h5><p>想要找出两个树结构之间的不同，传统的计算方法是通过循环递归进行树节点的一一对比，复杂度为O(n^3)</p><ul><li><p>若两个组件属于同一个类型，他们将拥有相同的DOM树结构</p></li><li><p>处于同一层级的一组子节点，可用通过设置<code>key</code>作为唯一标识从而维持在渲染过程中的稳定性</p><p><code>key</code>属性帮助React记住节点以便重用</p><p><img src="https://i.loli.net/2021/10/20/rCFqRmdKhLG6tXs.png" alt="image-20211020215509184"></p></li></ul></li><li><h5 id="解读setState工作流"><a href="#解读setState工作流" class="headerlink" title="解读setState工作流"></a>解读setState工作流</h5><p><img src="https://i.loli.net/2021/10/20/8cMYul7fCUXjWnD.png" alt="image-20211020220453496"></p><ul><li><p>在React钩子函数及合成事件中，它表现为异步</p></li><li><p>在setTimeout、setInterval等函数中包括DOM原生事件中，它表现为同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//伪代码</span><br>isBatchingUpdates = <span class="hljs-literal">true</span>; <br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;   <span class="hljs-comment">// 同步执行，异步更新</span><br>  <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>+<span class="hljs-number">1</span><br>&#125;)<br>isBatchingUpdates = <span class="hljs-literal">false</span> <br><br><br>isBatchingUpdates = <span class="hljs-literal">true</span> ；<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;  <span class="hljs-comment">// 异步执行，同步更新</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <br>    <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>+<span class="hljs-number">1</span><br>  &#125;)<br>&#125;)<br>isBatchingUpdates = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="React-16的Fiber架构"><a href="#React-16的Fiber架构" class="headerlink" title="React 16的Fiber架构"></a>React 16的Fiber架构</h4><ul><li><h5 id="架构-1"><a href="#架构-1" class="headerlink" title="架构"></a>架构</h5><ul><li>Scheduler（调度器）—— <strong>调度任务的优先级</strong>，高优任务优先进入Reconciler；</li><li>Reconciler（协调器）—— 负责找出变化的组件：<strong>更新工作从递归变成了可以中断的循环过程。Reconciler内部采用了Fiber的架构</strong>；</li><li>Renderer（渲染器）—— 负责将变化的组件渲染到页面上。</li></ul></li><li><h5 id="Fiber架构的迭代动机和设计思想"><a href="#Fiber架构的迭代动机和设计思想" class="headerlink" title="Fiber架构的迭代动机和设计思想"></a>Fiber架构的迭代动机和设计思想</h5><ul><li><p><code>Stack reconciler的局限性</code></p><ul><li>Reconciler采用递归的方式创建虚拟DOM，<strong>递归过程是不能中断的</strong>。如果组件树的层级很深，递归会占用线程很多时间，递归更新时间超过了16ms，用户交互就会卡顿</li></ul></li><li><p>Fiber如何解决问题</p><ul><li><p>实现<code>增量渲染</code>：将一个渲染任务拆解成多个渲染任务</p></li><li><p>核心：可中断、可恢复与优先级；一下分别是React15与React16的核心实现</p><p><img src="https://i.loli.net/2021/10/20/dwXBqu3AzW9bxsD.png" alt="image-20211020222808597"></p><p><img src="https://i.loli.net/2021/10/20/bamFHsZyCvXzu73.png" alt="image-20211020222829145"></p></li></ul></li></ul></li><li><h5 id="Fiber架构下ReactDOM-render的渲染链路"><a href="#Fiber架构下ReactDOM-render的渲染链路" class="headerlink" title="Fiber架构下ReactDOM.render的渲染链路"></a>Fiber架构下ReactDOM.render的渲染链路</h5></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构--树</title>
    <link href="/2021/09/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84----%E6%A0%91/"/>
    <url>/2021/09/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84----%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h3 id="数据结构之树"><a href="#数据结构之树" class="headerlink" title="数据结构之树"></a>数据结构之树</h3><ul><li><h4 id="树的优点"><a href="#树的优点" class="headerlink" title="树的优点"></a>树的优点</h4><ul><li><h5 id="查找效率要比数组、链表高"><a href="#查找效率要比数组、链表高" class="headerlink" title="查找效率要比数组、链表高"></a>查找效率要比数组、链表高</h5></li><li><h5 id="模拟场景方便，因为树是非线性的数据结构"><a href="#模拟场景方便，因为树是非线性的数据结构" class="headerlink" title="模拟场景方便，因为树是非线性的数据结构"></a>模拟场景方便，因为树是非线性的数据结构</h5><ul><li>可以表示一对多比如文档的目录结构</li></ul></li></ul></li><li><h4 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h4><ul><li>节点的度： 节点的子树个数</li><li>树的度： 树的所有节点中最大的度数</li><li>叶节点： 度为0的节点</li><li>树的深度： 树中所有节点中最大层次是这棵树的深度</li></ul></li><li><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><blockquote><p>如果树中的每个节点中最多只能有两个子节点，这样的树就叫做<code>二叉树</code>；</p><p><code>二叉树</code>可以为空，也就是没有节点，若不为空，则它是由根节点和称为其左子树TL和右子树TR两个不相交的二叉树组成</p></blockquote><p><img src="https://i.loli.net/2021/10/22/6jrZhBXHzuoAD8G.png" alt="image-20211022093941227"></p><ul><li>二叉树比较重要的特性<ul><li>一个二叉树第i层的最大节点数为：<code>2^(i-1) (i&gt;=1)</code></li><li>深度为K的二叉树最大节点总数为：<code>2^k - 1 (k&gt;=1)</code></li></ul></li><li>二叉树的存储<ul><li>二叉树最常见的存储方式时使用链表，将每个节点封装成一个数据Node，Node中包含存储的数据，左节点的引用，右节点的引用</li></ul></li></ul></li><li><h4 id="二叉搜索树-BST-Binary-Search-Tree"><a href="#二叉搜索树-BST-Binary-Search-Tree" class="headerlink" title="二叉搜索树(BST,Binary Search Tree)"></a>二叉搜索树(BST,Binary Search Tree)</h4><ul><li><p>特征</p><ul><li><p>二叉搜索树是一颗二叉树，可以为空；</p></li><li><p>如果不为空则满足下面性质：</p><ul><li><code>非空左子树的所有键值小于其根节点的键值</code></li><li><code>非空右子树的所有键值大于其根节点的键值</code></li><li><code>左右子树本身也是二叉搜索树</code></li></ul><p><img src="https://i.loli.net/2021/10/22/gk3VdmUrEp2xNJY.png" alt="image-20211022095024253"></p></li></ul></li><li><p>特点</p><ul><li>二叉搜索树的特点就是相对较小的值总保存在左节点上，利用这一特点查找效率非常高</li><li>利用二分查找的思想</li></ul></li></ul></li><li><h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><ul><li><p><code>先序遍历</code></p><ul><li>先访问根节点</li><li>先序遍历其左子树</li><li>先序遍历其右子树</li></ul><p><img src="https://i.loli.net/2021/10/22/6ekERNCj8YvfUt5.png" alt="image-20211022100156006"></p></li><li><p><code>中序遍历</code></p><ul><li>中序遍历其左子树</li><li>访问根节点</li><li>中序遍历其右子树</li></ul><p><img src="https://i.loli.net/2021/10/22/3bkfTFwr9CsKxVt.png" alt="image-20211022100252529"></p></li><li><p><code>后序遍历</code></p><ul><li>后序遍历其左子树</li><li>后序遍历其右子树</li><li>访问根节点</li></ul><p><img src="https://i.loli.net/2021/10/22/uDGs4TAwHiEtS6r.png" alt="image-20211022104730014"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  QWB &lt;wenbinqiu42@gmail.com&gt;</span><br><span class="hljs-comment"> * @Date: 2021-10-18 17:54:36</span><br><span class="hljs-comment"> * @LastEditors: QWB</span><br><span class="hljs-comment"> * @LastEditTime: 2021-10-21 20:44:03</span><br><span class="hljs-comment"> * @Description: 二叉树和二叉查找树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">key</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">key</span> = key;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">left</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">right</span> = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySearchTree</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 属性</span><br>&#125;<br><span class="hljs-comment">// 插入</span><br><span class="hljs-title function_">insert</span>(<span class="hljs-params">key</span>) &#123;<br><span class="hljs-keyword">let</span> newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key);<br><span class="hljs-comment">// 判断是否有根节点</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> === <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = newNode;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, newNode); <span class="hljs-comment">// 递归比较</span><br>&#125;<br>&#125;<br><span class="hljs-title function_">insertNode</span>(<span class="hljs-params">node, newNode</span>) &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 左子树查找</span><br><span class="hljs-keyword">if</span> (newNode.<span class="hljs-property">key</span> &lt; node.<span class="hljs-property">key</span>) &#123;<br><span class="hljs-keyword">if</span> (node.<span class="hljs-property">left</span> === <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 如果左子节点为空，插入的节点就为左子节点</span><br>node.<span class="hljs-property">left</span> = newNode;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 如果左子节点不为空，递归比较左子节点和插入节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(node.<span class="hljs-property">left</span>, newNode);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>右子树查找</span><br><span class="hljs-keyword">if</span> (node.<span class="hljs-property">right</span> === <span class="hljs-literal">null</span>) &#123;<br>node.<span class="hljs-property">right</span> = newNode;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">insertNode</span>(node.<span class="hljs-property">right</span>, newNode);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 先序遍历</span><br><span class="hljs-title function_">preOrderTraversal</span>(<span class="hljs-params">handler</span>) &#123;<br><span class="hljs-comment">// 先遍历根节点,递归调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraversalNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler);<br>&#125;<br><span class="hljs-title function_">preOrderTraversalNode</span>(<span class="hljs-params">node, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 利用handler来处理key</span><br><span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>);<br><span class="hljs-comment">// 处理经过节点的左子节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraversalNode</span>(node.<span class="hljs-property">left</span>, handler);<br><span class="hljs-comment">// 处理经过节点的右子节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">preOrderTraversalNode</span>(node.<span class="hljs-property">right</span>, handler);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-title function_">midOrderTraversal</span>(<span class="hljs-params">handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">midOrderTraversalNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler);<br>&#125;<br><span class="hljs-title function_">midOrderTraversalNode</span>(<span class="hljs-params">node, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 处理左子树中的节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">midOrderTraversalNode</span>(node.<span class="hljs-property">left</span>, handler);<br><span class="hljs-comment">// 处理节点</span><br><span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>);<br><span class="hljs-comment">// 处理右子树中的节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">midOrderTraversalNode</span>(node.<span class="hljs-property">right</span>, handler);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 后序遍历</span><br><span class="hljs-title function_">postOrderTraversal</span>(<span class="hljs-params">handler</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">postOrderTraversalNode</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>, handler);<br>&#125;<br><span class="hljs-title function_">postOrderTraversalNode</span>(<span class="hljs-params">node, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (node !== <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 处理左子树中的节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">midOrderTraversalNode</span>(node.<span class="hljs-property">left</span>, handler);<br><span class="hljs-comment">// 处理右子树中的节点</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">midOrderTraversalNode</span>(node.<span class="hljs-property">right</span>, handler);<br><span class="hljs-comment">// 处理节点</span><br><span class="hljs-title function_">handler</span>(node.<span class="hljs-property">key</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 最小值 ，根据二叉搜索树的特性，最左端的子节点 就是最小值</span><br><span class="hljs-title function_">min</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>;<br><span class="hljs-keyword">while</span> (node.<span class="hljs-property">left</span> !== <span class="hljs-literal">null</span>) &#123;<br>node = node.<span class="hljs-property">left</span>;<br>&#125;<br><span class="hljs-keyword">return</span> node.<span class="hljs-property">key</span>;<br>&#125;<br><br><span class="hljs-comment">// 最大值，根据二叉搜索树的特性。最右端子节点就是最大值</span><br><span class="hljs-title function_">max</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>;<br><span class="hljs-keyword">while</span> (node.<span class="hljs-property">right</span> !== <span class="hljs-literal">null</span>) &#123;<br>node = node.<span class="hljs-property">right</span>;<br>&#125;<br><span class="hljs-keyword">return</span> node.<span class="hljs-property">key</span>;<br>&#125;<br><br><span class="hljs-comment">//搜索  找到了则返回true,没找到则返回false</span><br><span class="hljs-title function_">search</span>(<span class="hljs-params">key</span>) &#123;<br><span class="hljs-comment">// 获取根节点</span><br><span class="hljs-keyword">let</span> node = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>;<br><span class="hljs-keyword">while</span> (node !== <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (key &lt; node.<span class="hljs-property">key</span>) &#123;<br><span class="hljs-comment">// 在左子树中寻找</span><br>node = node.<span class="hljs-property">left</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &gt; node.<span class="hljs-property">key</span>) &#123;<br><span class="hljs-comment">// 在右子树中寻找</span><br>node = node.<span class="hljs-property">right</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// while 之外没找到</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// test</span><br><span class="hljs-keyword">let</span> bst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinarySearchTree</span>();<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">11</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">7</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">15</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">5</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">3</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">9</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">8</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">10</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">13</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">12</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">14</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">20</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">18</span>);<br>bst.<span class="hljs-title function_">insert</span>(<span class="hljs-number">25</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bst);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bst.<span class="hljs-title function_">max</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bst.<span class="hljs-title function_">search</span>(<span class="hljs-number">18</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bst.<span class="hljs-title function_">search</span>(<span class="hljs-number">20</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bst.<span class="hljs-title function_">search</span>(<span class="hljs-number">2</span>))<br><span class="hljs-comment">// let resultString = &#x27;&#x27;;</span><br><span class="hljs-comment">// bst.preOrderTraversal((key) =&gt; &#123;</span><br><span class="hljs-comment">// resultString += key + &#x27;--&#x27;;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// alert(resultString);</span><br><br><span class="hljs-keyword">let</span> resultString = <span class="hljs-string">&#x27;&#x27;</span>;<br>bst.<span class="hljs-title function_">midOrderTraversal</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>resultString += key + <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;);<br><span class="hljs-title function_">alert</span>(resultString);<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React知识链路总结-上</title>
    <link href="/2021/09/28/React%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%8A/"/>
    <url>/2021/09/28/React%E7%9F%A5%E8%AF%86%E9%93%BE%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h4 id="JSX如何变成DOM的"><a href="#JSX如何变成DOM的" class="headerlink" title="JSX如何变成DOM的"></a>JSX如何变成<code>DOM</code>的</h4><ul><li><p>1.JSX的本质是什么，它和JS之间到底是什么关系</p></li><li><p>2.为什么要用JSX？不用会怎么样？</p></li><li><p>3.JSX背后的功能模块是什么，这个功能模块都做了那些事情？</p><ul><li><p>JSX是JavaScript的一种语法扩展，它和模板语言很接近，但是它充分具备JavaScript的能力</p></li><li><p>JSX语法是如何在Javascript中生效的？</p><ul><li>JSX会被<code>Babel</code>编译为<code>React.createElement()</code>,<code>React.createElement()</code>将返回一个<code>ReactElement</code>的<code>JS对象</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">/*</span><br><span class="hljs-comment">type:用于表示节点的类型，可以是html标签，React组件类型</span><br><span class="hljs-comment">config:以对象形式传入，组件所有的属性都会以键值对的形式存储在config对象中</span><br><span class="hljs-comment">children:组件标签之间嵌套的内容</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">type,config,children</span>)<br><br><span class="hljs-comment">//eg:</span><br>&lt;ul className=<span class="hljs-string">&quot;list&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;1&#x27;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span> <br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#x27;2&#x27;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>  <span class="hljs-string">&#x27;ul&#x27;</span>,<br>  &#123;<br>    <span class="hljs-attr">className</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>    <span class="hljs-string">&#x27;li&#x27;</span>,<br>    &#123;<br>      <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;1&#x27;</span><br>  ),<br>  <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-string">&#x27;2&#x27;</span>)<br>);<br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br><span class="hljs-comment">//需要渲染的元素(ReactElement).</span><br>  element,<br>  <span class="hljs-comment">//元素挂载的目标容器（一个真实DOM）</span><br>  container,<br>  <span class="hljs-comment">//回调函数</span><br>  [callback]<br>)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/a2OIhpexgPKnCJN.png" alt="image-20211013211700012"></p></li><li><p>源码</p><blockquote><p>关键是React中的ReactElement.js中的三个函数</p><p>createElement：创建并返回给定类型的新 ReactElement</p><p>ReactElement： 创建一个新的ReactElement</p><p>isValidElement：验证对象是否是一个 ReactElement。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create and return a new ReactElement of the given type.</span><br><span class="hljs-comment"> * 创建并返回给定类型的新 ReactElement。</span><br><span class="hljs-comment"> * See https://reactjs.org/docs/react-api.html#createelement</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">type, config, children</span>) &#123;<br>  <span class="hljs-keyword">let</span> propName;<br><br>  <span class="hljs-comment">// Reserved names are extracted</span><br>  <span class="hljs-keyword">const</span> props = &#123;&#125;;<br><br>  <span class="hljs-keyword">let</span> key = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> ref = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> self = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">let</span> source = <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">if</span> (config != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 处理config，然后赋值给props</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasValidRef</span>(config)) &#123;<br>      ref = config.<span class="hljs-property">ref</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasValidKey</span>(config)) &#123;<br>      key = <span class="hljs-string">&#x27;&#x27;</span> + config.<span class="hljs-property">key</span>;<br>    &#125;<br><br>    self = config.<span class="hljs-property">__self</span> === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : config.<span class="hljs-property">__self</span>;<br>    source = config.<span class="hljs-property">__source</span> === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : config.<span class="hljs-property">__source</span>;<br>    <span class="hljs-comment">// Remaining properties are added to a new props object</span><br>    <span class="hljs-keyword">for</span> (propName <span class="hljs-keyword">in</span> config) &#123;<br>      <span class="hljs-keyword">if</span> (<br>        hasOwnProperty.<span class="hljs-title function_">call</span>(config, propName) &amp;&amp;<br>        !<span class="hljs-variable constant_">RESERVED_PROPS</span>.<span class="hljs-title function_">hasOwnProperty</span>(propName)<br>      ) &#123;<br>        props[propName] = config[propName];<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Children can be more than one argument, and those are transferred onto</span><br>  <span class="hljs-comment">// the newly allocated props object.</span><br>  <span class="hljs-comment">// 处理children 会被赋值给props.children</span><br>  <span class="hljs-keyword">const</span> childrenLength = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> - <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (childrenLength === <span class="hljs-number">1</span>) &#123;<br>    props.<span class="hljs-property">children</span> = children;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (childrenLength &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">const</span> childArray = <span class="hljs-title class_">Array</span>(childrenLength);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; childrenLength; i++) &#123;<br>      childArray[i] = <span class="hljs-variable language_">arguments</span>[i + <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property">freeze</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(childArray);<br>      &#125;<br>    &#125;<br>    props.<span class="hljs-property">children</span> = childArray;<br>  &#125;<br><br>  <span class="hljs-comment">// Resolve default props</span><br>  <span class="hljs-comment">// 处理defaultProps</span><br>  <span class="hljs-keyword">if</span> (type &amp;&amp; type.<span class="hljs-property">defaultProps</span>) &#123;<br>    <span class="hljs-keyword">const</span> defaultProps = type.<span class="hljs-property">defaultProps</span>;<br>    <span class="hljs-keyword">for</span> (propName <span class="hljs-keyword">in</span> defaultProps) &#123;<br>      <span class="hljs-keyword">if</span> (props[propName] === <span class="hljs-literal">undefined</span>) &#123;<br>        props[propName] = defaultProps[propName];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    <span class="hljs-keyword">if</span> (key || ref) &#123;<br>      <span class="hljs-keyword">const</span> displayName =<br>        <span class="hljs-keyword">typeof</span> type === <span class="hljs-string">&#x27;function&#x27;</span><br>          ? type.<span class="hljs-property">displayName</span> || type.<span class="hljs-property">name</span> || <span class="hljs-string">&#x27;Unknown&#x27;</span><br>          : type;<br>      <span class="hljs-keyword">if</span> (key) &#123;<br>        <span class="hljs-title function_">defineKeyPropWarningGetter</span>(props, displayName);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (ref) &#123;<br>        <span class="hljs-title function_">defineRefPropWarningGetter</span>(props, displayName);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 传递给ReactElement</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">ReactElement</span>(<br>    type,<br>    key,<br>    ref,<br>    self,<br>    source,<br>    <span class="hljs-title class_">ReactCurrentOwner</span>.<span class="hljs-property">current</span>,<br>    props,<br>  );<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ReactElement</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">type, key, ref, self, source, owner, props</span>) &#123;<br>  <span class="hljs-keyword">const</span> element = &#123;<br>    <span class="hljs-comment">// This tag allows us to uniquely identify this as a React Element</span><br>    <span class="hljs-comment">// 标记这是一个React Element，是一个唯一标识；如果恶意插入标签可以用这个来区分是什么类型，这算是React为安全考虑的一个点</span><br>    <span class="hljs-attr">$$typeof</span>: <span class="hljs-variable constant_">REACT_ELEMENT_TYPE</span>,<br><br>    <span class="hljs-comment">// Built-in properties that belong on the element</span><br>    <span class="hljs-comment">// 属于元素的内部属性</span><br>    <span class="hljs-attr">type</span>: type,<br>    <span class="hljs-attr">key</span>: key,<br>    <span class="hljs-attr">ref</span>: ref,<br>    <span class="hljs-attr">props</span>: props,<br><br>    <span class="hljs-comment">// Record the component responsible for creating this element.</span><br>    <span class="hljs-attr">_owner</span>: owner,<br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>    <span class="hljs-comment">// The validation flag is currently mutative. We put it on</span><br>    <span class="hljs-comment">// an external backing store so that we can freeze the whole object.</span><br>    <span class="hljs-comment">// This can be replaced with a WeakMap once they are implemented in</span><br>    <span class="hljs-comment">// commonly used development environments.</span><br>    element.<span class="hljs-property">_store</span> = &#123;&#125;;<br><br>    <span class="hljs-comment">// To make comparing ReactElements easier for testing purposes, we make</span><br>    <span class="hljs-comment">// the validation flag non-enumerable (where possible, which should</span><br>    <span class="hljs-comment">// include every environment we run tests in), so the test framework</span><br>    <span class="hljs-comment">// ignores it.</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(element.<span class="hljs-property">_store</span>, <span class="hljs-string">&#x27;validated&#x27;</span>, &#123;<br>      <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">value</span>: <span class="hljs-literal">false</span>,<br>    &#125;);<br>    <span class="hljs-comment">// self and source are DEV only properties.</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(element, <span class="hljs-string">&#x27;_self&#x27;</span>, &#123;<br>      <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">value</span>: self,<br>    &#125;);<br>    <span class="hljs-comment">// Two elements created in two different places should be considered</span><br>    <span class="hljs-comment">// equal for testing purposes and therefore we hide it from enumeration.</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(element, <span class="hljs-string">&#x27;_source&#x27;</span>, &#123;<br>      <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">value</span>: source,<br>    &#125;);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property">freeze</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(element.<span class="hljs-property">props</span>);<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(element);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 返回元素</span><br>  <span class="hljs-keyword">return</span> element;<br>&#125;;<br><br><br><br><span class="hljs-comment">/*React提供的一个全局方法，用来判断是否是一个ReactElement*/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isValidElement</span>(<span class="hljs-params">object</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="hljs-keyword">typeof</span> object === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp;<br>    object !== <span class="hljs-literal">null</span> &amp;&amp;<br>    object.<span class="hljs-property">$$typeof</span> === <span class="hljs-variable constant_">REACT_ELEMENT_TYPE</span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="React-Component"><a href="#React-Component" class="headerlink" title="React Component"></a>React Component</h4></li></ul><blockquote><p>在React中我们经常创建Class组件和Function组件</p></blockquote><ul><li><p>基本使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs react">class AppClass extends React.Component &#123;<br>  render() &#123;<br>    return &lt;p&gt;Findly&lt;/p&gt;<br>  &#125;<br>&#125;<br>console.log(&#x27;这是ClassComponent：&#x27;, AppClass);<br>console.log(&#x27;这是Element：&#x27;, &lt;AppClass/&gt;);<br><br><br>function AppFunc() &#123;<br>  return &lt;p&gt;Findly&lt;/p&gt;;<br>&#125;<br>console.log(&#x27;这是FunctionComponent：&#x27;, AppFunc);<br>console.log(&#x27;这是Element：&#x27;, &lt;AppFunc/&gt;);<br></code></pre></td></tr></table></figure><p>从结果来看，他们的<code>type</code>都是它们自身，<code>classComponent</code>为<code>AppClass</code>,<code>FunctionComponent</code>为<code>AppFunc</code></p><img src="https://s2.loli.net/2021/12/06/b9CSoMYrp1cXUy4.png" alt="image-20211206161212701" style="zoom:50%;" /><blockquote><p>注意:heavy_exclamation_mark:</p><p><code>AppClass instanceof Function === true; AppFunc instanceof Function === true;</code></p><p>所以无法通过引用类型区分它们是哪种Component，React通过使用<code>ClassComponent.prototype.isReactComponent</code>来判断是否为<code>ClassComponent</code></p></blockquote></li><li><p>源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Component</span>(<span class="hljs-params">props, context, updater</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>  <span class="hljs-comment">// 如果一个组件有字符串参数，将分配一个不同的对象。</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span> = emptyObject;<br>  <span class="hljs-comment">// update更新组件，updater是react-dom中的内容</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span> = updater || <span class="hljs-title class_">ReactNoopUpdateQueue</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断是否为classComponent</span><br><span class="hljs-title class_">Component</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">isReactComponent</span> = &#123;&#125;;<br><br><span class="hljs-title class_">Component</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setState</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">partialState, callback</span>) &#123;<br>  <span class="hljs-title function_">invariant</span>(<br>    <span class="hljs-keyword">typeof</span> partialState === <span class="hljs-string">&#x27;object&#x27;</span> ||<br>      <span class="hljs-keyword">typeof</span> partialState === <span class="hljs-string">&#x27;function&#x27;</span> ||<br>      partialState == <span class="hljs-literal">null</span>,<br>    <span class="hljs-string">&#x27;setState(...): takes an object of state variables to update or a &#x27;</span> +<br>      <span class="hljs-string">&#x27;function which returns an object of state variables.&#x27;</span>,<br>  );<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>.<span class="hljs-title function_">enqueueSetState</span>(<span class="hljs-variable language_">this</span>, partialState, callback, <span class="hljs-string">&#x27;setState&#x27;</span>);<br>&#125;;<br><br><span class="hljs-title class_">Component</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">forceUpdate</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span>.<span class="hljs-title function_">enqueueForceUpdate</span>(<span class="hljs-variable language_">this</span>, callback, <span class="hljs-string">&#x27;forceUpdate&#x27;</span>);<br>&#125;;<br><br><br><span class="hljs-comment">//PureComponent</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ComponentDummy</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">ComponentDummy</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Component</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">PureComponent</span>(<span class="hljs-params">props, context, updater</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span> = props;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">refs</span> = emptyObject;<br>  <br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">updater</span> = updater || <span class="hljs-title class_">ReactNoopUpdateQueue</span>;<br>&#125;<br><span class="hljs-comment">// PureComponent继承自Component</span><br><span class="hljs-keyword">const</span> pureComponentPrototype = (<span class="hljs-title class_">PureComponent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentDummy</span>());<br>pureComponentPrototype.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">PureComponent</span>;<br><span class="hljs-comment">// Avoid an extra prototype jump for these methods.</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(pureComponentPrototype, <span class="hljs-title class_">Component</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-comment">//isPureReactComponent标识是一个PureComponent组件</span><br>pureComponentPrototype.<span class="hljs-property">isPureReactComponent</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h4><ul><li><p>拆解React生命周期，从React15开始</p><p><img src="https://i.loli.net/2021/10/13/G8bXLZ3JWIu4dte.png" alt="image-20211013212632437"></p><ul><li><code>constructor(props)</code><ul><li>仅在挂载的时候调用一次，可以在里面初始化<code>state</code></li></ul></li><li><code>componentWillMount</code><ul><li>仅在挂载的时候调用一次；会在执行<code>render()</code>方法前触发</li></ul></li><li><code>render</code><ul><li><code>render()</code>在执行过程中并不会操作真实的DOM，它的职能是把需要渲染的内容返回出来</li></ul></li><li><code>componentDidMount</code><ul><li>仅在挂载的时候调用一次,DOM已经挂载到页面上，可以在这个生命周期执行真实DOM相关的操作</li></ul></li><li><code>componentReceiveProps</code>并不是由<code>props</code>的变化触发的，而是由父组件的更新触发的<ul><li>在父组件修改仅跟父组件有关的<code>state</code>，传递给子组件的<code>props</code>没有改变，但是任然会触发<code>componentReceiveProps</code>方法</li></ul></li><li><code>shouldComponentUpdate（nextProps,nextState）</code><ul><li>控制组件<code>re-render</code>，可用于性能优化避免不必要的render</li></ul></li><li><code>componentWillUpdate</code></li><li><code>render()</code></li><li><code>componentDidUpdate</code></li><li><code>componentWillUnmount</code><ul><li>组件在父组件中被移除了</li><li>组件中设置了<code>key</code>属性，父组件在<code>render</code>过程中，发现<code>key</code>值和上一次不一致</li></ul></li></ul></li><li><p>React16生命周期</p><p><img src="https://i.loli.net/2021/10/14/IZovjyASflR1s92.png" alt="image-20211014182153518"></p><ul><li><code>getDerivedStateFromProps（props，state）</code>替代了<code>componentWillMount</code><ul><li>此方法作为一个静态方法,在方法内部获取不到组件实例<code>this</code>，还需要一个对象格式的返回值，因为React需要将此对象作为当前组件的<code>state</code></li><li><code>getDerivedStateFromProps</code>有且仅有一个用途：使用<code>props</code>来派生/更新<code>state</code></li><li>此生命周期在挂载和更新都会触发：因为派生state不仅在初始化props存在，在更新时也会存在</li></ul></li><li>为什么要用<code>getDerivedStateFromProps代替componentWillReceiveProps</code><ul><li><code>getDerivedStateFromProps</code>与<code>componentDidUpdate</code>一起，涵盖了过时的<code>componentWillReceiveProps</code>的所有用例</li></ul></li><li>React16为什么改变生命周期<ul><li><code>Fiber</code>是React16对React核心算法的一次重写</li><li><code>Fiber</code>会使原本<code>同步</code>的渲染过程变成<code>异步</code>的</li><li>在React16之前，每次触发组件更新，React都会构建一棵虚拟的DOM树，递归的diff比较当前页面的DOM树（不可打断的更新过程），同步渲染开始就会占据主线程，导致页面不可渲染无法交互出现卡死现象<ul><li><code>Fiber</code> 会将一个大的更新任务拆解成为许多小任务，每当小任务的更新完成之后会将主线程交回给渲染线程，避免卡顿的现象    </li><li><code>Fibel</code>做到了任务拆解以及可打断使得<code>同步渲染</code>变成<code>异步渲染</code></li></ul></li><li><code>Fibel</code>架构的重要特征就是可以被打断的异步渲染模式<ul><li>根据<code>能否被打断</code>将React16的生命周期划分为了<code>render</code>和<code>commit</code>两个阶段</li><li><code>render</code>阶段在执行过程中允许被打断和重启，而<code>commit</code>阶段则总是同步执行的<ul><li>因为<code>render</code>是在用户不可见的情况下发生的，就算打断、重启，用户也是不知道的<ul><li>为什么废弃<code>componentWillxxx</code>这些生命周期，因为它们在<code>Fibel</code>的架构下是可以打断、重启的；例如在这个生命周期中发起了付款请求，可能会发起多个请求</li></ul></li><li><code>commit</code>阶段则是真实DOM的渲染，所以要同步进行</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="数据如何在组件间流动"><a href="#数据如何在组件间流动" class="headerlink" title="数据如何在组件间流动"></a>数据如何在组件间流动</h4><ul><li><p>单向数据流动<code>props</code></p><ul><li>父传子通过<code>props</code>的形式传递数据</li><li>子传父通过将数据入参到父组件传递的函数，触发父组件的函数调用</li><li>兄弟组件通信借助父组件这个公共组件进行通信，将兄弟组件通信转换为了父子组件通信</li><li>不推荐使用<code>props</code>解决其他场景的需求<ul><li>组件层级嵌套过深，根组件与末子组件进行通信需要层层传递<code>props</code>,造成中间组件的代码污染，维护成本增加</li></ul></li></ul></li><li><p>利用<code>发布-订阅模式</code>驱动数据流</p><p><img src="https://i.loli.net/2021/10/14/frSBOmHiY246d9N.png" alt="image-20211014221328671"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author:  QWB &lt;wenbinqiu42@gmail.com&gt;</span><br><span class="hljs-comment"> * @Date: 2021-10-14 21:55:18</span><br><span class="hljs-comment"> * @LastEditors: QWB</span><br><span class="hljs-comment"> * @LastEditTime: 2021-10-14 22:14:15</span><br><span class="hljs-comment"> * @Description:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyEventEmitter</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// eventMap 用来存储事件和监听函数之间的关系</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span> = &#123;&#125;;<br>&#125;<br><span class="hljs-comment">// type代表事件名称</span><br><span class="hljs-title function_">on</span>(<span class="hljs-params">type, handler</span>) &#123;<br><span class="hljs-comment">// handler必须是一个函数,如果不是直接报错</span><br><span class="hljs-keyword">if</span> (!(handler <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请传入一个函数&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 判断type事件对应的队列是否存在</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type]) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type] = [];<br>&#125;<br><span class="hljs-comment">// 如果存在 则直接让队列中推入handler</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type].<span class="hljs-title function_">push</span>(handler);<br>&#125;<br><br><span class="hljs-comment">// emit触发事件,params为传递的参数</span><br><span class="hljs-title function_">emit</span>(<span class="hljs-params">type, params</span>) &#123;<br><span class="hljs-comment">// 如果存在对应的事件队列</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type]) &#123;<br><span class="hljs-comment">// 一次执行对应事件队列中的handler</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type].<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handler, index</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 传参params</span><br><span class="hljs-title function_">handler</span>(params);<br>&#125;);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 清除对应事件队列</span><br><span class="hljs-title function_">off</span>(<span class="hljs-params">type, handler</span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type]) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type].<span class="hljs-title function_">splice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[type].<span class="hljs-title function_">indexOf</span>(handler) &gt;&gt;&gt; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> myEvent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyEventEmitter</span>();<br><br><span class="hljs-keyword">const</span> testHandler = <span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`test事件触发了,testHandler接收到的参数是<span class="hljs-subst">$&#123;params&#125;</span>`</span>);<br>&#125;;<br>myEvent.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;test&#x27;</span>, testHandler);<br>myEvent.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;newState&#x27;</span>);<br><br><br><span class="hljs-comment">// 伪代码</span><br><span class="hljs-comment">// 将myEvent挂载到global</span><br><span class="hljs-keyword">const</span> globalEvent = <span class="hljs-variable language_">window</span>.<span class="hljs-property">myEvent</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><span class="hljs-comment">// ...</span><br>state = &#123;<br><span class="hljs-attr">newParams</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>&#125;;<br>handler = <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br><span class="hljs-attr">newParams</span>: params,<br>&#125;);<br>&#125;;<br>bindHandler = <span class="hljs-function">() =&gt;</span> &#123;<br>globalEvent.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;someEvent&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">handle</span>);<br>&#125;;<br><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> (<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.bindHandler&#125;</span>&gt;</span>点我监听A的动作<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>A传入的内容是&#123;this.state.newParams&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>state = &#123;<br><span class="hljs-attr">infoToB</span>: <span class="hljs-string">&#x27;哈哈哈哈我来自A&#x27;</span>,<br>&#125;;<br>reportToB = <span class="hljs-function">() =&gt;</span> &#123;<br>globalEvent.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;someEvent&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">infoToB</span>);<br>&#125;;<br><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.reportToB&#125;</span>&gt;</span>点我把state传递给B<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>使用<code>Context API</code>维护全局状态</p><p><img src="https://i.loli.net/2021/10/14/z8QdoJ2OLImjvB5.png" alt="image-20211014230208107"></p></li><li><p>Redux</p><ul><li><p>应用复杂度不断提升，组件间的关系难以处理，可以借助<code>Redux</code>提供可预测的状态管理</p><p><img src="https://i.loli.net/2021/10/14/jip8rM2agsAXLOd.png" alt="image-20211014231522252"></p></li><li><p>组成</p><ul><li><p><code>store</code>是一个单一的数据源，而且是只读的</p></li><li><p><code>action</code>是对变化的描述</p></li><li><p><code>reducer</code>根据变化描述进行分发和处理返回新的<code>state</code></p><p><img src="https://i.loli.net/2021/10/14/QKlcI8MqOv5Vx7s.png" alt="image-20211014231740957"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入redux</span><br><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><br><span class="hljs-comment">// 创建store</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(<br>reducer,<br>  initialValue,<br>  <span class="hljs-title function_">applyMiddleware</span>(middlewre1,middleware2...)<br>)<br><br><span class="hljs-comment">// 使用dispatch派发action，action会进入到reducer里触发对应的更新</span><br>store.<span class="hljs-title function_">dispatch</span>(action)<br><br><span class="hljs-comment">// reducer的作用是将新的state返回给store,纯函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducer</span> = (<span class="hljs-params">state,action</span>)=&gt;&#123;<br>  <span class="hljs-comment">// 对state做逻辑处理</span><br>  <span class="hljs-keyword">return</span> newState<br>&#125;<br><br><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="React-hooks的设计动机与工作模式"><a href="#React-hooks的设计动机与工作模式" class="headerlink" title="React-hooks的设计动机与工作模式"></a>React-hooks的设计动机与工作模式</h4><ul><li><p>hooks出现之前，类组件与函数式组件的区别</p><ul><li>类组件需要继承Class，函数组件不需要</li><li>类组件可以访问生命周期方法，函数组件不能</li><li>类组件可以获取到实例化后的<code>this</code> 并且基于<code>this</code>做各种不同的操作，函数组件不能</li><li>函数组件可以定义<code>state</code>状态。函数组件不可以</li></ul></li><li><p>重新认识类组件</p><ul><li>类组件是面向对象编程的一种表现<ul><li>封装：将一类属性和方法，封装在一个Class中去</li><li>继承：新的Class可以通过继承现有Class实现对某一类属性和方法的复用</li></ul></li></ul></li><li><p>函数组件</p><ul><li><p>函数组件会捕获<code>render</code>内部的状态，这是两类组件最大的不同</p><ul><li><p>函数组件与类组件本质的差别是<code>心智模式</code>层面的差异，是面向对象编程和函数式编程的不同设计思想；函数组件更加契合React框架的设计理念：UI=f(data)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 类组件</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <br>  <span class="hljs-comment">// 虽然props本身是不可变的，但是this确实可变的，this上的数据是可以修改的，this.props的调用每次都会获取最新的props，这是React确保数据实时性的重要手段</span><br>showMessage = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;followed&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">user</span>)<br>  &#125;<br>  handleClick = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">showMessage</span>,<span class="hljs-number">3000</span>)<br>  &#125;<br>  <br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick</span>  &#125;&gt;</span>Follow<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>useEffect不同情况下的不同使用</code></p><ul><li><p>每一次渲染都要执行的副作用：传入回调函数，不传依赖数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(callBack)<br></code></pre></td></tr></table></figure></li><li><p>仅在挂载阶段执行一次的副作用，传入回调函数，同时传入一个空数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(callBack,[])<br></code></pre></td></tr></table></figure></li><li><p>仅在挂载阶段和卸载阶段执行的副作用：传入一个函数，且函数的返回值是一个函数，同时传入一个空数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">useEffect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span>&#123;  <span class="hljs-comment">// return返回的是一个清除函数 </span><br><br>  &#125;<br>&#125;,[])<br></code></pre></td></tr></table></figure></li></ul></li><li><p>为什么需要React-Hooks</p><ul><li>告别难以理解的Class<ul><li>生命周期</li><li>this</li></ul></li><li>解决业务逻辑难以拆分的问题</li><li>使状态逻辑复用变得简单可行<ul><li>类组件实现复用靠的是<code>HOC</code>和<code>Render Props</code>设计模式，它们在实现逻辑复用的同时，也破坏了组件结构，最常见的一个问题是<code>组件嵌套地狱</code>现象</li><li>Hooks能够实现粒度更细的组件抽离，达到既不破坏组件结构又能实现逻辑复用的效果</li></ul></li><li>函数组件从设计理念更契合React的理念</li></ul></li><li><p><code>Hooks的局限性</code></p><ul><li>hooks暂时还不能完全地为函数组件补齐类组件的能力<ul><li>目前暂时还没有对应不常用的 <code>getSnapshotBeforeUpdate</code>，<code>getDerivedStateFromError</code> 和 <code>componentDidCatch</code> 生命周期的 Hook 等价写法</li><li>Hooks在使用层面有着更强的规则约束</li></ul></li></ul></li><li><p>React-Hooks的使用原则</p><ul><li><p>只在React函数中调用Hook</p></li><li><p>不要在循环、条件或者嵌套函数中调用Hook</p><ul><li><p>hooks的正常运行，在底层依赖于<code>顺序链表</code></p></li><li><p>以<code>useState为例</code>首次渲染和更新渲染</p><p><img src="https://i.loli.net/2021/10/15/Nu9BY7gTzrSdZjF.png" alt="image-20211015112639425"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 初始化state</span><br><span class="hljs-keyword">function</span> mountState&lt;S&gt;(<br>  <span class="hljs-attr">initialState</span>: (<span class="hljs-function">() =&gt;</span> S) | S,<br>): [S, <span class="hljs-title class_">Dispatch</span>&lt;<span class="hljs-title class_">BasicStateAction</span>&lt;S&gt;&gt;] &#123;<br>  <span class="hljs-comment">//定义一个hook，添加到hooks链表尾部</span><br>  <span class="hljs-keyword">const</span> hook = <span class="hljs-title function_">mountWorkInProgressHook</span>();<br>  <span class="hljs-comment">// 如果初始值是一个函数，初始值为函数执行结果</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> initialState === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span><br>    initialState = <span class="hljs-title function_">initialState</span>();<br>  &#125;<br>  <span class="hljs-comment">// 将当前初始值赋值给&#x27;记忆值&#x27;</span><br>  hook.<span class="hljs-property">memoizedState</span> = hook.<span class="hljs-property">baseState</span> = initialState;<br>  <span class="hljs-comment">// 创建当前hook对象的更新队列，主要为了依序保留dispatch</span><br>  <span class="hljs-keyword">const</span> queue = (hook.<span class="hljs-property">queue</span> = &#123;<br>    <span class="hljs-attr">pending</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">interleaved</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">lanes</span>: <span class="hljs-title class_">NoLanes</span>,<br>    <span class="hljs-attr">dispatch</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">lastRenderedReducer</span>: basicStateReducer,<br>    <span class="hljs-attr">lastRenderedState</span>: (<span class="hljs-attr">initialState</span>: any),<br>  &#125;);<br>  <span class="hljs-comment">// dispatch是由上下文一个叫dispatchAction创建的</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">dispatch</span>: <span class="hljs-title class_">Dispatch</span>&lt;<br>    <span class="hljs-title class_">BasicStateAction</span>&lt;S&gt;,<br>  &gt; = (queue.<span class="hljs-property">dispatch</span> = (dispatchAction.<span class="hljs-title function_">bind</span>(<br>    <span class="hljs-literal">null</span>,<br>    currentlyRenderingFiber,<br>    queue,<br>  ): any));<br>  <span class="hljs-comment">// 返回目标数组，dispatch就是我们用到的setxxx这个函数 </span><br>  <span class="hljs-keyword">return</span> [hook.<span class="hljs-property">memoizedState</span>, dispatch];<br>&#125;<br><br><span class="hljs-comment">// hook生成</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mountWorkInProgressHook</span>(<span class="hljs-params"></span>): <span class="hljs-title class_">Hook</span> &#123;<br>  <span class="hljs-comment">// 单个hook以对象的形式存在</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">hook</span>: <span class="hljs-title class_">Hook</span> = &#123;<br>    <span class="hljs-attr">memoizedState</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 记忆值</span><br>    <span class="hljs-attr">baseState</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 初始state </span><br>    <span class="hljs-attr">baseQueue</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 初始队列</span><br>    <span class="hljs-attr">queue</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 当前队列</span><br>    <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// next指针</span><br>  &#125;;<br><br>  <span class="hljs-keyword">if</span> (workInProgressHook === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// This is the first hook in the list</span><br>    <span class="hljs-comment">// 将hook作为链表的头节点处理</span><br>    currentlyRenderingFiber.<span class="hljs-property">memoizedState</span> = workInProgressHook = hook;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Append to the end of the list</span><br>    <span class="hljs-comment">// 如果链表不为空， 则将hook追加到链表尾部</span><br>    workInProgressHook = workInProgressHook.<span class="hljs-property">next</span> = hook;<br>  &#125;<br>  <span class="hljs-comment">// 返回当前hook</span><br>  <span class="hljs-keyword">return</span> workInProgressHook;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/15/x5GezNDSMEViypo.png" alt="image-20211015113734249"></p><p><code>updateState</code>做的事情就是按顺序去遍历之前构建好的链表，取出对应的数据信息进行渲染；</p><p>hooks的渲染是通过<code>依次遍历</code>来定位每个hooks内容，如果前后两次读到的链表在顺序上出现差异，那么渲染结果不可控</p></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架-React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack性能优化之优化打包构建速度</title>
    <link href="/2021/09/22/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E4%BC%98%E5%8C%96%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
    <url>/2021/09/22/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B%E4%BC%98%E5%8C%96%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="webpack性能优化之优化打包构建速度"><a href="#webpack性能优化之优化打包构建速度" class="headerlink" title="webpack性能优化之优化打包构建速度"></a>webpack性能优化之优化打包构建速度</h4><hr><h5 id="优化打包的构建速度能够提高开发体验以及开发效率，比如：代码打包够快编译够快，自动刷新等等"><a href="#优化打包的构建速度能够提高开发体验以及开发效率，比如：代码打包够快编译够快，自动刷新等等" class="headerlink" title="优化打包的构建速度能够提高开发体验以及开发效率，比如：代码打包够快编译够快，自动刷新等等"></a>优化打包的构建速度能够提高开发体验以及开发效率，比如：代码打包够快编译够快，自动刷新等等</h5><ul><li><h5 id="优化babel-loader-使用babel-loader-cacheDirectory方式，开启缓存，在代码没有改变的情况下不会重新编译会缓存打包结果值"><a href="#优化babel-loader-使用babel-loader-cacheDirectory方式，开启缓存，在代码没有改变的情况下不会重新编译会缓存打包结果值" class="headerlink" title="优化babel-loader,使用babel-loader?cacheDirectory方式，开启缓存，在代码没有改变的情况下不会重新编译会缓存打包结果值"></a>优化<code>babel-loader</code>,使用<code>babel-loader?cacheDirectory</code>方式，开启缓存，在代码没有改变的情况下不会重新编译会缓存打包结果值</h5><ul><li><h5 id="也可利用include和exclude来缩小需要编译的文件范围"><a href="#也可利用include和exclude来缩小需要编译的文件范围" class="headerlink" title="也可利用include和exclude来缩小需要编译的文件范围"></a>也可利用<code>include</code>和<code>exclude</code>来缩小需要编译的文件范围</h5></li></ul></li><li><h5 id="利用IgnorePlugin来忽略一些不必要的打包目录"><a href="#利用IgnorePlugin来忽略一些不必要的打包目录" class="headerlink" title="利用IgnorePlugin来忽略一些不必要的打包目录"></a>利用<code>IgnorePlugin</code>来忽略一些不必要的打包目录</h5><ul><li><h5 id="当使用moment进行时间格式化时，打包时会把locale内部的所有语言打包，可以通过配置IgnorePlugin来控制忽略掉这些目录"><a href="#当使用moment进行时间格式化时，打包时会把locale内部的所有语言打包，可以通过配置IgnorePlugin来控制忽略掉这些目录" class="headerlink" title="当使用moment进行时间格式化时，打包时会把locale内部的所有语言打包，可以通过配置IgnorePlugin来控制忽略掉这些目录"></a>当使用<code>moment</code>进行时间格式化时，打包时会把<code>locale</code>内部的所有语言打包，可以通过配置<code>IgnorePlugin</code>来控制忽略掉这些目录</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-comment">//weback自带的插件 忽略moment的locale文件夹，</span><br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">IgnorePlugin</span>(<span class="hljs-regexp">/\.\/locale/</span>,<span class="hljs-regexp">/moment/</span>),<span class="hljs-comment">//   如果引入这个moment包时 会忽略调 locale文件</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">template</span>:<span class="hljs-string">&quot;./public/index.html&quot;</span>,<br><br>        &#125;)<br>    ],<br><br>    <span class="hljs-comment">//我们要手动引入需要的语言包</span><br><span class="hljs-comment">// import &quot;moment/locale/zh-cn&quot;;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="利用happyPack开启多进程打包"><a href="#利用happyPack开启多进程打包" class="headerlink" title="利用happyPack开启多进程打包"></a>利用<code>happyPack</code>开启多进程打包</h5><ul><li><p>在webpack构建过程中，我们需要使用Loader对js，css，图片，字体等文件做转换操作，并且转换的文件数据量也是非常大的，且这些转换操作不能并发处理文件，而是需要一个个文件进行处理，HappyPack的基本原理是将这部分任务分解到多个子进程中去并行处理，子进程处理完成后把结果发送到主进程中，从而减少总的构建时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br><span class="hljs-comment">// js</span><br>&#123;<br><span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br><span class="hljs-comment">// 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例</span><br><span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;happypack/loader?id=babel&#x27;</span>],<br><span class="hljs-attr">include</span>: srcPath,<br><span class="hljs-comment">// exclude: /node_modules/</span><br>&#125;,<br>],<br>&#125;,<br><span class="hljs-attr">plugins</span>:[<br>  <span class="hljs-comment">// happyPack 开启多进程打包</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br><span class="hljs-comment">// 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件</span><br><span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;babel&#x27;</span>,<br><span class="hljs-comment">// 如何处理 .js 文件，用法和 Loader 配置中一样</span><br><span class="hljs-attr">loaders</span>: [<span class="hljs-string">&#x27;babel-loader?cacheDirectory&#x27;</span>],<br>&#125;),<br>]<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="利用ParallelUglifyPlugin开启多进程压缩JS-本质还是使用uglifyjs插件，但是开启了多进程打包"><a href="#利用ParallelUglifyPlugin开启多进程压缩JS-本质还是使用uglifyjs插件，但是开启了多进程打包" class="headerlink" title="利用ParallelUglifyPlugin开启多进程压缩JS(本质还是使用uglifyjs插件，但是开启了多进程打包)"></a>利用<code>ParallelUglifyPlugin</code>开启多进程压缩JS(本质还是使用uglifyjs插件，但是开启了多进程打包)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>:[<br>  <span class="hljs-comment">// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ParallelUglifyPlugin</span>(&#123;<br><span class="hljs-comment">// 传递给 UglifyJS 的参数</span><br><span class="hljs-comment">// （还是使用 UglifyJS 压缩，只不过帮助开启了多进程）</span><br><span class="hljs-attr">uglifyJS</span>: &#123;<br><span class="hljs-attr">output</span>: &#123;<br><span class="hljs-attr">beautify</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 最紧凑的输出</span><br><span class="hljs-attr">comments</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 删除所有的注释</span><br>&#125;,<br><span class="hljs-attr">compress</span>: &#123;<br><span class="hljs-comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span><br><span class="hljs-attr">drop_console</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-comment">// 内嵌定义了但是只用到一次的变量</span><br><span class="hljs-attr">collapse_vars</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span><br><span class="hljs-attr">reduce_vars</span>: <span class="hljs-literal">true</span>,<br>&#125;,<br>&#125;,<br>&#125;),<br>]<br></code></pre></td></tr></table></figure></li><li><h5 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h5><ul><li><h5 id="配置了devserver会自动开启自动刷新功能"><a href="#配置了devserver会自动开启自动刷新功能" class="headerlink" title="配置了devserver会自动开启自动刷新功能"></a>配置了<code>devserver</code>会自动开启自动刷新功能</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>     <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>     <span class="hljs-attr">progress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 显示打包的进度条</span><br>     <span class="hljs-attr">contentBase</span>: distPath,  <span class="hljs-comment">// 根目录</span><br>     <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 自动打开浏览器</span><br>     <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 启动 gzip 压缩</span><br>     <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-comment">// 设置代理</span><br>     <span class="hljs-attr">proxy</span>: &#123;<br>         <span class="hljs-comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span><br>         <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>    <br>         <span class="hljs-comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span><br>         <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>             <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>             <span class="hljs-attr">pathRewrite</span>: &#123;<br>                 <span class="hljs-string">&#x27;/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>             &#125;<br>         &#125;<br>     &#125;<br> &#125;,<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="利用HotModuleReplacementPlugin开启热更新"><a href="#利用HotModuleReplacementPlugin开启热更新" class="headerlink" title="利用HotModuleReplacementPlugin开启热更新"></a>利用<code>HotModuleReplacementPlugin</code>开启热更新</h5><ul><li><h5 id="使用webpack自带的HotModuleReplacementPlugin插件，在devServer配置中也要加入hot-hotOnly属性配置"><a href="#使用webpack自带的HotModuleReplacementPlugin插件，在devServer配置中也要加入hot-hotOnly属性配置" class="headerlink" title="使用webpack自带的HotModuleReplacementPlugin插件，在devServer配置中也要加入hot,hotOnly属性配置"></a>使用webpack自带的<code>HotModuleReplacementPlugin</code>插件，在<code>devServer</code>配置中也要加入<code>hot,hotOnly</code>属性配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// const HotModuleReplacementPlugin = require(&#x27;webpack/lib/HotModuleReplacementPlugin&#x27;);</span><br>  <br><span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>            <span class="hljs-comment">// window.ENV = &#x27;production&#x27;</span><br>            <span class="hljs-attr">ENV</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;development&#x27;</span>)<br>        &#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotModuleReplacementPlugin</span>()<br>    ],<br><span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>        <span class="hljs-attr">progress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 显示打包的进度条</span><br>        <span class="hljs-attr">contentBase</span>: distPath,  <span class="hljs-comment">// 根目录</span><br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 启动 gzip 压缩</span><br>        <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 开启热更新</span><br>        <span class="hljs-attr">hotOnly</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启热更新失败也不自动刷新</span><br>        <span class="hljs-comment">// 设置代理</span><br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span><br>            <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br><br>            <span class="hljs-comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span><br>            <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>                <span class="hljs-attr">pathRewrite</span>: &#123;<br>                    <span class="hljs-string">&#x27;/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure></li><li><h5 id="对于文件还需要使用module-hot-accept做变化处理"><a href="#对于文件还需要使用module-hot-accept做变化处理" class="headerlink" title="对于文件还需要使用module.hot.accept做变化处理"></a>对于文件还需要使用<code>module.hot.accept</code>做变化处理</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入 css</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./style/style1.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./style/style2.less&#x27;</span>;<br><br><span class="hljs-keyword">import</span> &#123; sum &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math&#x27;</span>;<br><span class="hljs-keyword">import</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><br><span class="hljs-keyword">const</span> sumRes = <span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sumRes&#x27;</span>, sumRes);<br><span class="hljs-comment">// 引入图片</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">insetImg</span>(<span class="hljs-params">imgFile</span>) &#123;<br><span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>img.<span class="hljs-property">src</span> = imgFile;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(img);<br>&#125;<br><span class="hljs-keyword">import</span> imageFile1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./img/1.png&#x27;</span>;<br><span class="hljs-title function_">insetImg</span>(imageFile1);<br><span class="hljs-keyword">import</span> imageFile2 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./img/2.jpeg&#x27;</span>;<br><span class="hljs-title function_">insetImg</span>(imageFile2);<br><br><span class="hljs-comment">// 增加，开启热更新之后的代码逻辑</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>) &#123;<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">hot</span>.<span class="hljs-title function_">accept</span>([<span class="hljs-string">&#x27;./math&#x27;</span>], <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> sumRes = <span class="hljs-title function_">sum</span>(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sumRes in hot&#x27;</span>, sumRes)<br>    &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="DLLPlugin针对第三方库做提前打包，避免反复编译浪费时间"><a href="#DLLPlugin针对第三方库做提前打包，避免反复编译浪费时间" class="headerlink" title="DLLPlugin针对第三方库做提前打包，避免反复编译浪费时间"></a>DLLPlugin针对第三方库做提前打包，避免反复编译浪费时间</h5><ul><li><h5 id="前端框架体积大，构建慢，而且是稳定的版本所以同一八本只需要构建一次不用重复构建，节省打包时间"><a href="#前端框架体积大，构建慢，而且是稳定的版本所以同一八本只需要构建一次不用重复构建，节省打包时间" class="headerlink" title="前端框架体积大，构建慢，而且是稳定的版本所以同一八本只需要构建一次不用重复构建，节省打包时间"></a>前端框架体积大，构建慢，而且是稳定的版本所以同一八本只需要构建一次不用重复构建，节省打包时间</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; smart &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> webpackCommonConf = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; srcPath, distPath &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./paths&#x27;</span>)<br><br><span class="hljs-comment">// 第一，引入 DllReferencePlugin</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DllReferencePlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack/lib/DllReferencePlugin&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">smart</span>(webpackCommonConf, &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>                <span class="hljs-attr">loader</span>: [<span class="hljs-string">&#x27;babel-loader&#x27;</span>],<br>                <span class="hljs-attr">include</span>: srcPath,<br>                <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span> <span class="hljs-comment">// 第二，不要再转换 node_modules 的代码</span><br>            &#125;,<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>            <span class="hljs-comment">// window.ENV = &#x27;production&#x27;</span><br>            <span class="hljs-attr">ENV</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;development&#x27;</span>)<br>        &#125;),<br>        <span class="hljs-comment">// 第三，告诉 Webpack 使用了哪些动态链接库</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DllReferencePlugin</span>(&#123;<br>            <span class="hljs-comment">// 描述 react 动态链接库的文件内容</span><br>            <span class="hljs-attr">manifest</span>: <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">join</span>(distPath, <span class="hljs-string">&#x27;react.manifest.json&#x27;</span>)),<br>        &#125;),<br>    ],<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>        <span class="hljs-attr">progress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 显示打包的进度条</span><br>        <span class="hljs-attr">contentBase</span>: distPath,  <span class="hljs-comment">// 根目录</span><br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 启动 gzip 压缩</span><br><br>        <span class="hljs-comment">// 设置代理</span><br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span><br>            <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br><br>            <span class="hljs-comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span><br>            <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>                <span class="hljs-attr">pathRewrite</span>: &#123;<br>                    <span class="hljs-string">&#x27;/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure></li><li><h5 id="经过配置的打包产物如下："><a href="#经过配置的打包产物如下：" class="headerlink" title="经过配置的打包产物如下："></a>经过配置的打包产物如下：</h5><p><img src="https://i.loli.net/2021/10/11/praeBTAz9Ef2qU7.png" alt="image-20211011190450581"></p></li><li><h5 id="在index-html页面中要使用产出的dll-js文件"><a href="#在index-html页面中要使用产出的dll-js文件" class="headerlink" title="在index.html页面中要使用产出的dll.js文件"></a>在<code>index.html</code>页面中要使用产出的<code>dll.js</code>文件</h5><p><img src="https://i.loli.net/2021/10/11/hGvx9yfRNzuXmra.png" alt="image-20211011190635639"></p></li><li><h5 id="最后在webpack-dev-js中告诉DllReferencePlugin使用哪些动态链接库"><a href="#最后在webpack-dev-js中告诉DllReferencePlugin使用哪些动态链接库" class="headerlink" title="最后在webpack.dev.js中告诉DllReferencePlugin使用哪些动态链接库"></a>最后在<code>webpack.dev.js</code>中告诉<code>DllReferencePlugin</code>使用哪些动态链接库</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; smart &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-merge&#x27;</span>)<br><span class="hljs-keyword">const</span> webpackCommonConf = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./webpack.common.js&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; srcPath, distPath &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./paths&#x27;</span>)<br><br><span class="hljs-comment">// 第一，引入 DllReferencePlugin</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DllReferencePlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack/lib/DllReferencePlugin&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">smart</span>(webpackCommonConf, &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>                <span class="hljs-attr">loader</span>: [<span class="hljs-string">&#x27;babel-loader&#x27;</span>],<br>                <span class="hljs-attr">include</span>: srcPath,<br>                <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span> <span class="hljs-comment">// 第二，不要再转换 node_modules 的代码</span><br>            &#125;,<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> webpack.<span class="hljs-title class_">DefinePlugin</span>(&#123;<br>            <span class="hljs-comment">// window.ENV = &#x27;production&#x27;</span><br>            <span class="hljs-attr">ENV</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-string">&#x27;development&#x27;</span>)<br>        &#125;),<br>        <span class="hljs-comment">// 第三，告诉 Webpack 使用了哪些动态链接库</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DllReferencePlugin</span>(&#123;<br>            <span class="hljs-comment">// 描述 react 动态链接库的文件内容</span><br>            <span class="hljs-attr">manifest</span>: <span class="hljs-built_in">require</span>(path.<span class="hljs-title function_">join</span>(distPath, <span class="hljs-string">&#x27;react.manifest.json&#x27;</span>)),<br>        &#125;),<br>    ],<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>,<br>        <span class="hljs-attr">progress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 显示打包的进度条</span><br>        <span class="hljs-attr">contentBase</span>: distPath,  <span class="hljs-comment">// 根目录</span><br>        <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 自动打开浏览器</span><br>        <span class="hljs-attr">compress</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 启动 gzip 压缩</span><br><br>        <span class="hljs-comment">// 设置代理</span><br>        <span class="hljs-attr">proxy</span>: &#123;<br>            <span class="hljs-comment">// 将本地 /api/xxx 代理到 localhost:3000/api/xxx</span><br>            <span class="hljs-string">&#x27;/api&#x27;</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br><br>            <span class="hljs-comment">// 将本地 /api2/xxx 代理到 localhost:3000/xxx</span><br>            <span class="hljs-string">&#x27;/api2&#x27;</span>: &#123;<br>                <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>,<br>                <span class="hljs-attr">pathRewrite</span>: &#123;<br>                    <span class="hljs-string">&#x27;/api2&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br><br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react-intl-universal踩坑</title>
    <link href="/2021/09/20/react-intl-universal%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
    <url>/2021/09/20/react-intl-universal%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="react-intl-universal踩坑"><a href="#react-intl-universal踩坑" class="headerlink" title="react-intl-universal踩坑"></a>react-intl-universal踩坑</h3><h5 id="前言：-在业务测试过程中发现了一个bug-不是我干的-，面包屑没有按照多语言进行翻译，任务分配给了一个刚来的小伙子，他也不会正好来请教我，于是乎有了这次经历"><a href="#前言：-在业务测试过程中发现了一个bug-不是我干的-，面包屑没有按照多语言进行翻译，任务分配给了一个刚来的小伙子，他也不会正好来请教我，于是乎有了这次经历" class="headerlink" title="前言： 在业务测试过程中发现了一个bug(不是我干的)，面包屑没有按照多语言进行翻译，任务分配给了一个刚来的小伙子，他也不会正好来请教我，于是乎有了这次经历"></a>前言： 在业务测试过程中发现了一个bug(不是我干的)，面包屑没有按照多语言进行翻译，任务分配给了一个刚来的小伙子，他也不会正好来请教我，于是乎有了这次经历</h5><hr><h4 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h4><ul><li><p>在我们公司项目中，使用多语言都是采用公司封装的utils写的,<code>import intl from &#39;utils/intl&#39;;</code>,于是我找到了源码，看看这个<code>intl</code>到底是个啥玩意儿。</p></li><li><p>不看不知道，一看吓一跳，往下看（好家伙，原来这就是封装）</p><p><img src="https://i.loli.net/2021/10/09/jatGkTyLURIrQCX.png" alt="image-20211009170636370"></p></li><li><p>于是去搜了一下这个包，发现是阿里巴巴的，[react-intl-universal](<a href="https://github.com/alibaba/react-intl-universal">alibaba/react-intl-universal: Internationalize React apps. Not only for React.Component but also for Vanilla JS. (github.com)</a>),可惜全是英文文档，看不太懂，没关系，继续搜索</p></li><li><p>接下来，在代码里进行<code>console.log</code>把<code>intl</code>打印出来，发现在它的<code>locales</code>内部有对应语言的编码，但是通过<code>intl.get</code>方法去取出来，却什么也没打印出来</p><p><img src="https://i.loli.net/2021/10/09/TSmOfMYd4LDJoAa.png" alt="image-20211009171218141"></p><p><img src="https://i.loli.net/2021/10/09/NsBWxfn1t6rRz2u.png" alt="image-20211009171306865"></p></li><li><p>再接下来，继续搜索，带着疑问，为什么明明有编码<code>intl.get()</code>方法却取不到对应的值，在找了好几个文章之后，终于在<code>CSDN</code>一篇文章找到了答案<a href="https://blog.csdn.net/chenqk_123/article/details/102858073">使用react-intl-universal进行组件和非组件的国际化</a>,文章说到了，非组件的js文件中使用，发现并不起作用(- -!，原来这么简单，我还是太菜了)</p></li></ul><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>​    将定义的需要多语言转换的面包屑数组移到组件内部，在本地测试发现神奇般的好了，完美解决</p><p><img src="https://i.loli.net/2021/10/09/6CPtNzr4yvsxKUh.png" alt="image-20211009171741552"></p><h4 id="后续："><a href="#后续：" class="headerlink" title="后续："></a>后续：</h4><p>对于<code>react-intl-universal</code>的忽视让我心怀愧疚，于是创了个demo进行基本使用，了解是怎么做国际化多语言装换的</p><p>项目结构：</p><img src="https://i.loli.net/2021/10/09/GqUFgvALdZ6iwCR.png" alt="image-20211009172327334" style="zoom:33%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> intl <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-intl-universal&#x27;</span><br><span class="hljs-keyword">import</span> &#123; withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">initDone</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;intl.get(&#x27;login.username&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;intl.get(&#x27;editor.item.name&#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleLanguage.bind(this)&#125;</span>&gt;</span>EN/中<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//生命周期</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">App</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; location &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">let</span> ps = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseQueryString</span>(location.<span class="hljs-property">search</span>)<br>    <span class="hljs-keyword">let</span> currentLocale = ps.<span class="hljs-property">language</span> || <span class="hljs-string">&#x27;zh-CN&#x27;</span><br>    intl.<span class="hljs-title function_">init</span>(&#123;<br>      <span class="hljs-attr">currentLocale</span>: currentLocale,<br>      <span class="hljs-attr">commonLocaleDataUrls</span>: &#123;<br>        <span class="hljs-string">&#x27;zh&#x27;</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-attr">locales</span>: &#123;<br>        <span class="hljs-comment">// 根据不同的语言，拿到不同的json文件</span><br>        [currentLocale]: <span class="hljs-built_in">require</span>(<span class="hljs-string">`./locales/<span class="hljs-subst">$&#123;currentLocale&#125;</span>`</span>).<span class="hljs-property">default</span><br>      &#125;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">initDone</span>: <span class="hljs-literal">true</span> &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">handleLanguage</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; location &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span><br>    <span class="hljs-keyword">let</span> ps = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parseQueryString</span>(location.<span class="hljs-property">search</span>)<br>    <span class="hljs-comment">// 对url进行操作，请求不同json配置</span><br>    <span class="hljs-keyword">if</span> (ps.<span class="hljs-property">language</span> === <span class="hljs-string">&#x27;en-US&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;?language=zh-CN&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ps.<span class="hljs-property">language</span> === <span class="hljs-string">&#x27;zh-CN&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;?language=en-US&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;?language=en-US&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 刷新页面，组件重新加载</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>()<br>  &#125;,<br>  <span class="hljs-title function_">parseQueryString</span>(<span class="hljs-params">url</span>) &#123;<br>    <span class="hljs-keyword">var</span> params = &#123;&#125;;<br>    <span class="hljs-keyword">var</span> arr = url.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;?&quot;</span>);<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &lt;= <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> params;<br>    &#125;<br>    arr = arr[<span class="hljs-number">1</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = arr.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>      <span class="hljs-keyword">var</span> a = arr[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>      params[a[<span class="hljs-number">0</span>]] = a[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> params;<br>  &#125;<br>&#125;)<br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">withRouter</span>(<span class="hljs-title class_">App</span>);<br><br></code></pre></td></tr></table></figure><ul><li><p>zh-CH.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./zh-CN_Editor.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-attr">login</span>: &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;用户名&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">editor</span>: editor<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>zh-CN_Editor.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-attr">item</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;邱文斌&#x27;</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure></li><li><p>en-US.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> editor <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./en-US_Editor.js&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-attr">login</span>: &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Username&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">editor</span>: editor <br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>en-US_Editor.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123;<br>  <span class="hljs-attr">item</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Qiuwenbin&#x27;</span><br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><h5 id="项目是基于dva构建的项目工程，所以在项目中多语言应该是在点击语言选择框后将语言的对应locales数据保存进去，这样在各个页面中都能够通过intl-get-方式获取到当前语言对应的值，也方便业务测试人员进行语种信息维护"><a href="#项目是基于dva构建的项目工程，所以在项目中多语言应该是在点击语言选择框后将语言的对应locales数据保存进去，这样在各个页面中都能够通过intl-get-方式获取到当前语言对应的值，也方便业务测试人员进行语种信息维护" class="headerlink" title="项目是基于dva构建的项目工程，所以在项目中多语言应该是在点击语言选择框后将语言的对应locales数据保存进去，这样在各个页面中都能够通过intl.get()方式获取到当前语言对应的值，也方便业务测试人员进行语种信息维护"></a>项目是基于dva构建的项目工程，所以在项目中多语言应该是在点击语言选择框后将语言的对应<code>locales</code>数据保存进去，这样在各个页面中都能够通过<code>intl.get()</code>方式获取到当前语言对应的值，也方便业务测试人员进行语种信息维护</h5>]]></content>
    
    
    <categories>
      
      <category>项目相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现数组扁平化方法总结</title>
    <link href="/2021/03/02/%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <url>/2021/03/02/%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>数组的扁平化其实就是将一个嵌套多层的数组 array（嵌套可以是任何层数）转换为只有一层的数组。举个简单的例子，假设有个名为 flat 的函数可以做到数组扁平化，效果如下面这段代码所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]]];<br><span class="hljs-comment">// 输出[1,2,3,4]</span><br></code></pre></td></tr></table></figure><p>扁平化既是将多维数组，输出成意一维数组，接下来我们就来实现如何将数组拍平的 flat 方法。</p><h4>方法一：递归实现 </h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 递归实现的思路就是循环遍历数组，对每一项做不同判断，如果当前项仍是数组，则继续递归拍平</span><br><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]]];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span> (arr)&#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i&lt; arr.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-comment">// 判断当前项是否为数组，是则递归，否则push到result中</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr[i]))&#123;<br>      result = result.<span class="hljs-title function_">concat</span>(<span class="hljs-title function_">flat</span>(arr[i]))<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      result.<span class="hljs-title function_">push</span>(arr[i])<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">// console.log(flat(a))  [1,2,3,4]</span><br></code></pre></td></tr></table></figure><h4>方法二：reduce方式实现 </h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//reduce实现跟第一种方法很相似，只不过我们使用reduce的灵活参数来简化代码，达到相同的目的。</span><br><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre,next</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> pre.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(next)?<span class="hljs-title function_">flat</span>(next):next)<br>    &#125;,[])<br>&#125;<br><br><span class="hljs-comment">//console.log(flat(a))  [1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><h4>方法三：扩展运算符实现 </h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过扩展运算符与数组的some方法一起使用，同样能够实现数组拍平效果</span><br><br><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>]]]];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span>(<span class="hljs-params">arr</span>)&#123;<br>  <span class="hljs-comment">// 先过滤出是数组的项，通过扩展运算符+concat方法拼接返回</span><br>  <span class="hljs-keyword">while</span>(arr.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(item)))&#123;<br>    arr = [].<span class="hljs-title function_">concat</span>(...arr)<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-comment">// console.log(flat(a)) [1,2,3,4,5]</span><br><br></code></pre></td></tr></table></figure><h4>方法四：ES6数组的flat方法实现 </h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在ES6中数组的flat方法可以直接实现数组扁平化，arr.flat([depth]),其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。</span><br><span class="hljs-comment">//参数也可以传进 Infinity，代表不论多少层都要展开</span><br><br><span class="hljs-keyword">let</span> a1 = [<span class="hljs-number">1</span>,[<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>]]]];<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flat</span> (arr)&#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">flat</span>(<span class="hljs-title class_">Infinity</span>)<br>&#125;<br><span class="hljs-comment">//console.log(flat(arr)) // [1,2,3,4,5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript学习</title>
    <link href="/2021/01/20/TypeScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/01/20/TypeScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="TypeScript学习"><a href="#TypeScript学习" class="headerlink" title="TypeScript学习"></a>TypeScript学习</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><ul><li><h5 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h5><blockquote><p>通过类型声明可以指定<code>TS</code>中变量（参数、形参）的类型，指定类型后为变量赋值，<code>TS编译器</code>会自动检查值是否符合类型声明，否则报错</p></blockquote><ul><li><p>语法</p><ul><li><pre><code class="ts">let 变量:类型；let 变量:类型 = 值；function fn（参数:类型,参数:类型）:类型&#123;  ...&#125;<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>+ <span class="hljs-comment">##### 自动类型判断</span><br><br>  &gt; `TS`拥有自动的类型判断机制，当对变量的声明和赋值是同时进行的，`TS编译器`会自动判断类型<br>  &gt;<br>  &gt; 对于函数来说，参数传多或传少在`TS`中都会报错.<br><br>  + 如：<br><br>    ```tsx<br>    let c = false;  <span class="hljs-regexp">//</span>声明变量c和赋值同事进项，再次修改已经确定了它的数据类型了<br>    c=<span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-regexp">//</span> tsc 编译会报错 <span class="hljs-regexp">//</span> 不能将类型“string”分配给类型“boolean”。<br>    <br>    <br>    <span class="hljs-keyword">function</span> sum(a: number, b: number): number &#123;<br>      return a + b<br>    &#125;<br>    sum(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;456&#x27;</span>,<span class="hljs-number">123</span>) <span class="hljs-regexp">//</span>类型“string”的参数不能赋给类型“number”的参数。 应有 <span class="hljs-number">2</span> 个参数，但获得 <span class="hljs-number">3</span> 个。<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>注意&#x2757;</p><ul><li><p>即使编译会报错，但是还是能够编译成功</p><img src="https://s2.loli.net/2021/12/16/ZvUkTOVNIQPqnuh.png" alt="image-20211213105642058" style="zoom:25%;" /></li></ul></li></ul></li><li><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1,213,-12</td><td>任意数字</td></tr><tr><td>string</td><td>‘hello’,’11’</td><td>任意字符串</td></tr><tr><td>boolean</td><td>true,false</td><td>布尔值true或者false</td></tr><tr><td>any</td><td>*</td><td>任意类型；<code>不建议使用</code></td></tr><tr><td>unknow</td><td>*</td><td>类型安全的any</td></tr><tr><td>void</td><td>空值(undefined)</td><td>没有值或者undefined</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>对象</td><td>任意的js对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意js数组</td></tr><tr><td>tuple</td><td>[3,4]</td><td>元祖，ts新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A,B}</td><td>枚举，ts新增类型</td></tr><tr><td>|</td><td>let b:’male’ | ‘female’</td><td>可以用来连接多个类型，b可以取值为其中之一</td></tr><tr><td>?</td><td>{name:string,age?:number}</td><td>可以用<code>?</code>来表示可选属性</td></tr><tr><td>type</td><td>type myType = string;                                    let a :myTtype ;</td><td>类型别名，myType就表示string类型</td></tr></tbody></table><ul><li><p>注意:exclamation:</p><ul><li><p><code>any</code>和`unknown的区别</p><blockquote><p><code>any</code> 是任意类型，如果一个变量声明为<code>any</code>，再将这个变量赋值给另一个变量，则会导致另一变量也关闭类型检查，而`unknown赋值给另一变量，类型检查不会关闭</p></blockquote></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">// any</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: any;<br>b = <span class="hljs-literal">false</span>;<br>b = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: string;<br>c = b  <span class="hljs-comment">// c 类型为string b赋值给c  导致c关闭了类型检查</span><br><span class="hljs-comment">//unknown</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: unknown;<br>b = <span class="hljs-literal">false</span>;<br>b = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: string;<br>c = b  <span class="hljs-comment">// ts类型检查 会提示不能将类型“unknown”分配给类型“string”</span><br><br><span class="hljs-comment">// 类型断言</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: unknown;<br>b = <span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: string;<br><span class="hljs-comment">// c = &lt;String&gt; b</span><br>c = b <span class="hljs-keyword">as</span> string; <span class="hljs-comment">// as 类型断言用来告诉解析器，b就是string类型</span><br><br><span class="hljs-comment">//对象定义</span><br><span class="hljs-comment">// [propName:string]:any 表示任意类型的属性都可以，但是必须有name属性</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>:&#123;<span class="hljs-attr">name</span>:string,[<span class="hljs-attr">propName</span>:string]:any&#125;<br>c=&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Findly&quot;</span>, <br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-comment">// 数组定义</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>:string[];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>:<span class="hljs-title class_">Array</span>&lt;string&gt;<br><br><span class="hljs-comment">// 元祖 固定长度的数组</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">h</span>:[string,string]<br>h=[<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>]  <span class="hljs-comment">// 固定只能是定义时的个数</span><br><br><span class="hljs-comment">// 枚举</span><br>enum <span class="hljs-title class_">Gender</span>&#123;<br>  <span class="hljs-title class_">Male</span>,<br>  <span class="hljs-title class_">Female</span><br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">i</span>: &#123;<br>  <span class="hljs-attr">name</span>: string,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-title class_">Gender</span><br>&#125;<br>i = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;邱文斌&quot;</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-title class_">Gender</span>.<span class="hljs-property">Male</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h4><ul><li><h5 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h5><ul><li><p>编译文件时使用<code>-w</code>命令，编译器会自动监视文件变化并且在文件发生变化时自动编译为js文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tsc xxx.ts -w<br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h5><ul><li><p>根目录添加<code>tsconfig.json</code>文件，<code>TS编译器</code>根据这个配置文件来对<code>ts</code>进行编译</p></li><li><p><code>tsconfig.json</code>配置选项</p><ul><li><p><code>include</code></p><ul><li><p>定义希望被编译的文件所在目录</p></li><li><p>默认值：[<strong>/</strong>]</p></li><li><p>使用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;include&quot;</span>: [<span class="hljs-string">&quot;./src/**/*&quot;</span>],  <span class="hljs-comment">// 路径 ** 表示任意目录，*表示任意文件</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>exclude</code></p><ul><li><p>排除不希望被编译的文件目录</p></li><li><p>默认值：[“node_modules”,”bower_component”]</p></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;exclude&quot;</span>:[ <span class="hljs-string">&quot;node_modules&quot;</span>, <span class="hljs-string">&quot;**/*.spec.ts&quot;</span>]<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>extends</code></p><ul><li><p>定义被继承的配置文件</p></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;extends&quot;</span>:<span class="hljs-string">&quot;./config/base&quot;</span>  <span class="hljs-comment">// 当前配置文件会自动包含config下的base.json配置信息</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>files</code></p><ul><li><p>指定被编译的文件</p></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;files&quot;</span>:[<br>  <span class="hljs-string">&#x27;index.ts&#x27;</span>,<br>  <span class="hljs-string">&#x27;app.ts&#x27;</span><br>] <span class="hljs-comment">// 只有定义的这两个ts文件会被编译</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>compilerOptions</code></p><ul><li><p>编译选项是配置文件中非常重要也是比较复杂的配置选项</p></li><li><p>在<code>compilerOptions</code>中包含多个子选项，用来完成对编译的配置</p><ul><li><p>项目选项</p><ul><li><p><code>target</code></p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：ES3(默认)、ES5、ES6/ES2015…</p></li><li><p>使用</p><ul><li><pre><code class="js">&quot;compilerOptions&quot;:&#123;  &quot;target&quot;:&#39;ES6&#39;&#125;<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-bullet">+</span> <span class="hljs-code">`module`</span><br><br><span class="hljs-bullet">  +</span> 设置模块化的规范<br><span class="hljs-bullet">  +</span> 可选值：es2015、commonjs...<br><br><span class="hljs-bullet">+</span> <span class="hljs-code">`lib`</span><br><br><span class="hljs-bullet">  +</span> 指定代码运行时所包含的库（宿主环境）<br><span class="hljs-bullet">  +</span> 可选值:ES5、ES6...、DOM、webWorker<br><span class="hljs-bullet">  +</span> <span class="hljs-code">`一般不需要设置，除非在node端使用时需要设置一下，默认就是浏览器环境`</span><br><br><span class="hljs-bullet">+</span> <span class="hljs-code">`outDir`</span><br><br><span class="hljs-bullet">  +</span> 编译后的输出目录<br><br><span class="hljs-bullet">  +</span> <span class="hljs-code">```js</span><br><span class="hljs-code">    &quot;outDir&quot;:&#x27;./dist&#x27;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p><code>allowJS</code></p><ul><li>可选值：true|false</li><li>如果为<code>false</code>则不会对<code>js</code>后缀文件进行编译</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><blockquote><p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code></p></blockquote><ul><li><p><code>public</code> 表示属性或方法是公有的，可以在任何地方被访问到，默认所有属性和方法都是<code>public</code></p></li><li><p><code>private</code>表示属性或方法是私有的，不能在声明它的类的外部访问</p></li><li><p><code>protected</code>表示属性或方法是受保护的，不能在类外部访问到，但是在子类中是允许访问的</p></li><li><p><code>readonly</code>只读属性关键字无法修改属性，只允许出现在属性声明或索引签名或构造函数中；<code>其他访问修饰符同时存在的话，需要写在其后面</code>,</p></li><li><p><code>abstract</code> 用于定义抽象类和其中的抽象方法；抽象类不能被实例化，抽象类中的抽象方法必须被子类实现；<code>一般用来继承的时候使用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  name;<br>  private readonly age;<br>  protected gender;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: string, age: number, gender: string</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender<br>  &#125;<br><br>&#125;<br><span class="hljs-keyword">let</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Findly&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per.<span class="hljs-property">name</span>)<br><span class="hljs-comment">// 可以看到age 和 gender是不能访问的 会编译报错</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per.<span class="hljs-property">age</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(per.<span class="hljs-property">gender</span>)<br></code></pre></td></tr></table></figure></li><li><h5 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h5><blockquote><p>在类中我们可以通过setter、getter来做到属性的存取器；但是在TS中，可以直接使用set/get 来达到设置setter/getter的目的</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">_name</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">_age</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_age</span> = age<br>  &#125;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>._name&#125;</span>`</span>)<br>  &#125;<br>  <span class="hljs-comment">// getName() &#123;</span><br>  <span class="hljs-comment">//   return this.name</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// setName(value: string) &#123;</span><br>  <span class="hljs-comment">//   this.name = value</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span><br>  &#125;<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">value: <span class="hljs-built_in">string</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = value<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// name属性是私有的通过实例是拿不到的，但是通过get方法可以拿到 所以可以直接调用 实例.name方法得到私有属性name</span><br><span class="hljs-keyword">const</span> myclass = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myClass</span>(<span class="hljs-string">&#x27;myclass&#x27;</span>, <span class="hljs-number">19</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myclass.<span class="hljs-property">name</span>)  <span class="hljs-comment">// 打印 myclass</span><br></code></pre></td></tr></table></figure><ul><li><p>属性定义的简写</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><br><span class="hljs-comment">// class myClass &#123;</span><br><span class="hljs-comment">//   private _name: string;</span><br><span class="hljs-comment">//   private _age: number;</span><br><span class="hljs-comment">//   constructor(name, age) &#123;</span><br><span class="hljs-comment">//     this._name = name;</span><br><span class="hljs-comment">//     this._age = age</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 在constructor中定义属性类型。可以省略this.name赋值过程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span>, <span class="hljs-keyword">public</span> age: <span class="hljs-built_in">number</span></span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><img src="https://s2.loli.net/2021/12/16/lLNTB1dqyKinFxE.png" alt="image-20211214160709423" style="zoom:25%;" />  <figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// abstract 定义抽象类 不能被实例化</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>name;<br><span class="hljs-keyword">public</span> age;<br>gender;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, age: <span class="hljs-built_in">number</span>, gender: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// 抽象方法不能具体实现</span><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>job<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, gender, job: <span class="hljs-built_in">string</span></span>) &#123;<br>  <span class="hljs-variable language_">super</span>(name, age, gender)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>&#125;<br><span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// 父类的抽象方法 子类必须实现</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&#x27;Findly&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;coder&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;p==&#x27;</span>, p)  <span class="hljs-comment">//Student &#123;name: &#x27;Findly&#x27;, age: 18, gender: &#x27;男&#x27;, job: &#x27;coder&#x27;&#125;</span><br><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><blockquote><p>接口用来定义一个类结构，限制类，用来定义一个类中应该包含哪些属性和方法，同时接口也可以当做类型声明去使用，类似<code>type</code>定义的类型声明</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">interface myInterface &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">obj</span>: myInterface = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;sss&quot;</span><br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span>  <span class="hljs-comment">// 不能将类型“&#123; name: string; age: number; gender: string; &#125;”分配给类型“myInterface”。对象文字可以只指定已知属性，并且“gender”不在类型“myInterface”中。</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><h5 id="接口继承接口"><a href="#接口继承接口" class="headerlink" title="接口继承接口"></a>接口继承接口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">Alarm</span> &#123;<br>    <span class="hljs-title function_">alert</span>(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br>interface <span class="hljs-title class_">LightableAlarm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Alarm</span> &#123;<br>    <span class="hljs-title function_">lightOn</span>(): <span class="hljs-keyword">void</span>;<br>    <span class="hljs-title function_">lightOff</span>(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-comment">//LightableAlarm 继承了 Alarm，除了拥有 alert 方法之外，还拥有两个新方法 lightOn 和 lightOff</span><br></code></pre></td></tr></table></figure></li><li><p><code>implements</code>关键字用于类去实现一个接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">interface myInterface &#123;<br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-keyword">void</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> implements myInterface &#123;  <span class="hljs-comment">// 接口中定义的属性和方法，类中必须要实现</span><br>  <span class="hljs-attr">name</span>: string;<br>  <span class="hljs-attr">age</span>: number;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>  <span class="hljs-title function_">sayHello</span>(): <span class="hljs-keyword">void</span> &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>)    <br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">const</span> myclass = <span class="hljs-keyword">new</span> <span class="hljs-title function_">myClass</span>(<span class="hljs-string">&#x27;myclass&#x27;</span>, <span class="hljs-number">19</span>)<br>myclass.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// this is my name myclass</span><br></code></pre></td></tr></table></figure></li><li><h5 id="注意-x2757"><a href="#注意-x2757" class="headerlink" title="注意&#x2757;"></a>注意&#x2757;</h5><ul><li><p><code>type</code>和<code>interface</code>的区别</p><ul><li><p><code>type</code>可以用于其他类型，比如联合类型、元祖类型、基本类型；<code>interface</code>不能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">type <span class="hljs-title class_">PartialPointX</span> = &#123; <span class="hljs-attr">x</span>: number &#125;;<br>type <span class="hljs-title class_">PartialPointY</span> = &#123; <span class="hljs-attr">y</span>: number &#125;;<br><br><span class="hljs-comment">// union(联合)</span><br>type <span class="hljs-title class_">PartialPoint</span> = <span class="hljs-title class_">PartialPointX</span> | <span class="hljs-title class_">PartialPointY</span>;<br><br><span class="hljs-comment">// tuple(元祖)</span><br>type <span class="hljs-title class_">Data</span> = [<span class="hljs-title class_">PartialPointX</span>, <span class="hljs-title class_">PartialPointY</span>];<br><br><span class="hljs-comment">//primitive(原始值)</span><br>type <span class="hljs-title class_">Name</span> = <span class="hljs-title class_">Number</span>;<br><br><span class="hljs-comment">// typeof的返回值</span><br><span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>type B = <span class="hljs-keyword">typeof</span> div;<br></code></pre></td></tr></table></figure></li><li><p><code>interface</code>可以多次定义，并被视为合并所有声明成员，<code>type</code>不支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">interface <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">x</span>: number;<br>&#125;<br>interface <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-attr">y</span>: number;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">point</span>: <span class="hljs-title class_">Point</span> = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span> &#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>type</code>能使用<code>in</code>关键字生成映射类型，<code>interface</code>不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">type <span class="hljs-title class_">Keys</span> = <span class="hljs-string">&#x27;firstname&#x27;</span> | <span class="hljs-string">&#x27;surname&#x27;</span>;<br><br>type <span class="hljs-title class_">DudeType</span> = &#123;<br>  [key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Keys</span>]: string;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">test</span>: <span class="hljs-title class_">DudeType</span> = &#123;<br>  <span class="hljs-attr">firstname</span>: <span class="hljs-string">&#x27;Pawel&#x27;</span>,<br>  <span class="hljs-attr">surname</span>: <span class="hljs-string">&#x27;Grzybek&#x27;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>接口中的所有属性都不能有实际的值，接口只定义对象的接口，而不考虑实际值，在接口中所有的方法都是抽象方法</p></li></ul></li></ul><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><blockquote><p>在定义函数或者类时，如果遇到类型不明确时，只有在函数运行才能确定类型时就可以使用泛型</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> fn&lt;T&gt;(<span class="hljs-attr">a</span>: T): T &#123;<br>  <span class="hljs-keyword">return</span> a<br>&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">10</span>)  <span class="hljs-comment">// 会自动给泛型T 赋值为number</span><br>fn&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;hello&#x27;</span>)  <span class="hljs-comment">//  可以在调用的时候 指定泛型T的类型</span><br><br><span class="hljs-comment">// 泛型可以指定多个</span><br><span class="hljs-keyword">function</span> fn2&lt;T, K&gt;(<span class="hljs-attr">a</span>: T, <span class="hljs-attr">b</span>: K): T &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br>  <span class="hljs-keyword">return</span> a<br>&#125;<br>fn2&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// 泛型可以通过extends实现接口 实现范围控制</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>  <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-comment">// 泛型T extends Inter 表示泛型实现了Inter接口的类 且有length属性</span><br><span class="hljs-keyword">function</span> fn3&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inter</span>&gt;(<span class="hljs-attr">a</span>: T): <span class="hljs-built_in">number</span> &#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-property">length</span><br>&#125;<br><span class="hljs-title function_">fn3</span>(<span class="hljs-string">&#x27;123&#x27;</span>);  <span class="hljs-comment">// string类型可以通过</span><br><span class="hljs-title function_">fn3</span>(<span class="hljs-number">11</span>)  <span class="hljs-comment">//number类型不能通过没有length属性</span><br><span class="hljs-title function_">fn3</span>([<span class="hljs-number">123</span>, <span class="hljs-number">123</span>]) <span class="hljs-comment">// 数组类型可以通过</span><br><br><span class="hljs-comment">// 泛型作用在类上</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span>&lt;T&gt;&#123;<br>  <span class="hljs-attr">name</span>:T;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name:T</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> per = <span class="hljs-keyword">new</span> myClass&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;Findly&#x27;</span>) <span class="hljs-comment">// 在实例化的时候声明泛型T的类型</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单的脚手架实现过程</title>
    <link href="/2020/10/30/%E7%AE%80%E5%8D%95%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/10/30/%E7%AE%80%E5%8D%95%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="前置内容"><a href="#前置内容" class="headerlink" title="前置内容"></a>前置内容</h3><h4 id="Package-json中bin的作用"><a href="#Package-json中bin的作用" class="headerlink" title="Package.json中bin的作用"></a>Package.json中bin的作用</h4><blockquote><p>内部命令对应的可执行文件的路径;    </p></blockquote><h4 id="usr-bin-env-node-到底是什么？"><a href="#usr-bin-env-node-到底是什么？" class="headerlink" title="#!/usr/bin/env node 到底是什么？"></a>#!/usr/bin/env node 到底是什么？</h4><ul><li><h4 id=""><a href="#" class="headerlink" title="#!"></a>#!</h4><blockquote><p><code>shenbang</code> 为了指定脚本的解释程序</p></blockquote></li><li><p><code>/usr/bin/env</code>就是告诉系统可以在PATH目录中查找内容</p></li><li><p>所以配置<code>#!/usr/bin/env node</code>, 就是解决了不同的用户node路径不同的问题，可以让系统动态的去查找node来执行你的脚本文件</p><h3 id="简单的脚手架制作"><a href="#简单的脚手架制作" class="headerlink" title="简单的脚手架制作"></a>简单的脚手架制作</h3></li><li><p>初始化项目名称<code>simaple</code>,并执行<code>yarn init</code>命令得到<code>package.json</code>文件。</p><p><img src="https://i.loli.net/2021/11/02/QFDmdtOMZsTgoW4.png" alt="image-20211102164025166"></p></li><li><p>添加<code>bin</code>配置，并指向当前目录下的<code>cli.js</code>文件，执行<code>cli</code>命令</p><p><img src="https://i.loli.net/2021/11/02/jl7Bzg6vtTDpxNi.png" alt="image-20211102163607525"></p></li><li><p>在文件夹根目录添加<code>cli.js</code>文件</p><ul><li><p>脚手架的主要工作内容有两个：</p><ul><li>通过命令行交互询问用户问题</li><li>根据用户的回答生成文件</li></ul></li><li><p>注意<code>cli.js</code>文件头部一定要添加这段内容<code>#!/usr/bin/env node</code></p></li></ul></li><li><p>执行<code>yarn link</code>，将<code>simaple</code>作为外链可以全局引用</p></li><li><p>创建<code>templates</code>模板文件夹，定义模板文件，比较简单只有一个<code>index.html</code>和<code>style.css</code>文件，内容如下：</p><p><img src="https://i.loli.net/2021/11/02/xt4fFOQIXiz31Hl.png" alt="image-20211102165049382"></p></li><li><p>接下来完善<code>cli.js</code>文件内容，通过<code>ejs</code>将模板文件输出到目标文件夹<code>demo</code>中去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">#!/usr/bin/env node</span><br><br><span class="hljs-comment">// node cli 应用入口必须要有这样的文件头，如果是mac需要修改此文件的读写权限为755</span><br><span class="hljs-comment">// 具体通过chmod 755 cli.js实现修改</span><br><br><span class="hljs-comment">// 脚手架的工作过程</span><br><span class="hljs-comment">//1.通过命令行交互询问用户问题</span><br><span class="hljs-comment">// 2. 根据用户的回答结果生成文件</span><br><br><span class="hljs-comment">// 发起命令行交互询问</span><br><span class="hljs-keyword">const</span> inquirer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inquirer&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>);<br><span class="hljs-comment">// 发起命令行询问</span><br>inquirer<br>.<span class="hljs-title function_">prompt</span>([<br>&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;input&#x27;</span>,<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;name&#x27;</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Project name?&#x27;</span>,<br>&#125;,<br>])<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resp</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 根据用户回答的结果生成文件</span><br><span class="hljs-comment">// 模板目录</span><br><span class="hljs-keyword">const</span> templateDir = path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;templates&#x27;</span>);<br><span class="hljs-comment">// 目标目录</span><br><span class="hljs-keyword">const</span> destDir = process.<span class="hljs-title function_">cwd</span>();<br>fs.<span class="hljs-title function_">readdir</span>(templateDir, <span class="hljs-function">(<span class="hljs-params">err, files</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">file</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// console.log(&#x27;file&#x27;, file);</span><br><span class="hljs-comment">// 通过模板引擎渲染文件</span><br>ejs.<span class="hljs-title function_">renderFile</span>(path.<span class="hljs-title function_">join</span>(templateDir, file), resp, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-comment">// console.log(&#x27;result==&#x27;, result);</span><br><span class="hljs-comment">// 写入目标路径</span><br>fs.<span class="hljs-title function_">writeFileSync</span>(path.<span class="hljs-title function_">join</span>(destDir, file), result);<br>&#125;);<br>&#125;);<br>&#125;);<br>&#125;);<br><br></code></pre></td></tr></table></figure></li><li><p>最后进入到<code>demo</code>文件夹内部,执行<code>simaple</code>命令，得到模板文件</p><p><img src="https://i.loli.net/2021/11/02/z6fRCyhbqH54AP8.png" alt="image-20211102165607449"></p></li></ul><hr><h3 id="通过这个小demo了解了脚手架的工作内容，接下来就继续深入开发一个可以投入生产使用的脚手架工具"><a href="#通过这个小demo了解了脚手架的工作内容，接下来就继续深入开发一个可以投入生产使用的脚手架工具" class="headerlink" title="通过这个小demo了解了脚手架的工作内容，接下来就继续深入开发一个可以投入生产使用的脚手架工具"></a>通过这个小demo了解了脚手架的工作内容，接下来就继续深入开发一个可以投入生产使用的脚手架工具</h3>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工程化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器之跨域</title>
    <link href="/2020/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%8B%E8%B7%A8%E5%9F%9F/"/>
    <url>/2020/10/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%8B%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="浏览器之跨域"><a href="#浏览器之跨域" class="headerlink" title="浏览器之跨域"></a>浏览器之跨域</h3><ul><li><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4></li><li><h4 id="怎么样算跨域？"><a href="#怎么样算跨域？" class="headerlink" title="怎么样算跨域？"></a>怎么样算跨域？</h4></li><li><h4 id="如何解决跨域？"><a href="#如何解决跨域？" class="headerlink" title="如何解决跨域？"></a>如何解决跨域？</h4></li></ul><h4 id="1-跨域的来源"><a href="#1-跨域的来源" class="headerlink" title="1.跨域的来源"></a>1.跨域的来源</h4><p>跨域问题的来源是浏览器为了请求安全而引入的基于<code>同源策略</code>的安全特性。同源策略是浏览器一个非常重要的安全策略，基于这个安全策略可以限制非同源的内容与当前页面进行交互和通信，来达到减少被攻击的目的。我们也要明白一个重点：<code>跨域是浏览器的限制，服务端并不存在跨域的概念</code>;当产生跨域问题时，我们可以通过<code>JSONP</code>、<code>CORS</code>,<code>反向代理</code>、<code>postMessage</code>等方式来解决</p><h4 id="2-跨域的判定"><a href="#2-跨域的判定" class="headerlink" title="2.跨域的判定"></a>2.跨域的判定</h4><p><img src="https://i.loli.net/2021/10/18/3BZtp6oFlDCUL9x.png" alt="cors"></p><p>如上图所示，一个 origin 由<strong>协议（Protocol）</strong>、<strong>主机名（Host）</strong>和<strong>端口（Port）</strong>组成，这三块也是同源策略的判定条件，只有当<strong>协议</strong>、<strong>主机名</strong>和<strong>端口</strong>都相同时，浏览器才判定两者是同源关系，三者任一不同则为<code>跨域</code></p><h4 id="3-跨域的解决方案"><a href="#3-跨域的解决方案" class="headerlink" title="3.跨域的解决方案"></a>3.跨域的解决方案</h4><p>前端常见的跨域解决方案有<code>JSONP</code>、使用Nginx或者Node中间件做代理，利用<code>CORS</code>,<code>postMessage</code>等方式；</p><ul><li><p><code>JSONP</code></p><p><code>JSONP</code>的原理主要是利用<code>&lt;script&gt;</code>,<code>link</code>,<code>&lt;img&gt;</code>等标签的特性在加载资源文件时不受同源策略的限制能够实现跨域获取数据，但是需要前后端一起配合才能实现并且只能支持<code>GET</code>请求方式。具体步骤如下：</p><ul><li>定义一个回调函数，并且用DOM方法创建一个<code>script</code>元素</li><li>指定要请求的URL，并将回调函数作为一个参数传递过去</li><li>将<code>script</code>便签插入到当前文档中，请求开始</li><li>服务器接收到传递过来的参数，然后将回调函数和数据以调用的形式传入</li><li>当<code>script</code>标签接收到响应中的脚本代码后，就会自动执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createScript</span>(<span class="hljs-params">url, charset</span>) &#123;<br>    <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript&#x27;</span>);<br>    charset &amp;&amp; script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;charset&#x27;</span>, charset);<br>    script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, url);<br>    script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> script;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonp</span>(<span class="hljs-params">url, onsuccess, onerror, charset</span>) &#123;<br>    <span class="hljs-keyword">const</span> hash = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-variable language_">window</span>[<span class="hljs-string">&#x27;jsonp&#x27;</span> + hash] = <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (onsuccess &amp;&amp; <span class="hljs-title function_">typeof</span>(onsuccess) === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-title function_">onsuccess</span>(data);<br>&#125; &#125;<br><span class="hljs-keyword">const</span> script = <span class="hljs-title function_">createScript</span>(url + <span class="hljs-string">&#x27;?callback=jsonp&#x27;</span> + hash, charset);<br><span class="hljs-comment">// 监听加载成功的事件，获取数据，这个位置用了两个事件onload和onreadystatechange是为了 兼容IE，因为IE9之前不支持onload事件，只支持onreadystatechange事件</span><br>script.<span class="hljs-property">onload</span> = script.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//若不存在readyState事件则证明不是IE浏览器，可以直接执行，若是的话，必须等到状态变为</span><br>loaded或complete才可以执行<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> === <span class="hljs-string">&#x27;loaded&#x27;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span><br>=== <span class="hljs-string">&#x27;complete&#x27;</span>) &#123;<br>script.<span class="hljs-property">onload</span> = script.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 移除该script的DOM对象</span><br><span class="hljs-keyword">if</span> (script.<span class="hljs-property">parentNode</span>) &#123;<br>                script.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(script);<br>            &#125;<br><span class="hljs-comment">// 删除函数或变量</span><br>            <span class="hljs-variable language_">window</span>[<span class="hljs-string">&#x27;jsonp&#x27;</span> + hash] = <span class="hljs-literal">null</span>;<br>        &#125;<br>&#125;;<br>    script.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (onerror &amp;&amp; <span class="hljs-title function_">typeof</span>(onerror) === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br><span class="hljs-title function_">onerror</span>(); &#125;<br>&#125;<br><span class="hljs-comment">// 添加标签，发送请求</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(script);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="相关知识-跨域脚本报错怎么拿到相关信息？"><a href="#相关知识-跨域脚本报错怎么拿到相关信息？" class="headerlink" title="相关知识-跨域脚本报错怎么拿到相关信息？"></a>相关知识-跨域脚本报错怎么拿到相关信息？</h4><ul><li>当引入跨域的脚本（比如用了 apis.google.com 上的库文件）时，如果这个脚本有错误，因为浏览器的限制（根本原因是协议的规定），是拿不到错误信息的。当本地尝试使用<code>window.onerror</code>去记录脚本的错误时，跨域脚本的错误只会返回 <code>Script error</code>。</li><li>而 HTML5 新的规定，是可以允许本地获取到跨域脚本的错误信息的，但有两个条件：一是跨域脚本的服务器必须通过 <code>Access-Control-Allow-Origin </code>头信息允许当前域名可以获取错误信息，二是网页里的 <code>script</code> 标签也必须指明 src 属性指定的地址是支持跨域的地址，也就是 <code>crossorigin</code> 属性。有了这两个条件，就可以获取跨域脚本的错误信息</li></ul></li><li><p><code>CORS</code></p><p><code>CORS</code>通信流程是浏览器自动完成，不需要用户参与，其核心点是服务器，只要服务器实现了 <code>CORS</code>接口就可以实现跨源通信了。虽然是浏览器自动完成，但是浏览器其实还是根据请求时字段 的不同分为简单请求和非简单请求的;</p><ul><li><p>简单请求</p><ul><li> 请求方法是一下三种方法之一:HEAD、GET、POST;</li><li> HTTP的头信息不超出以下几种字段:Accept、Accept-Language、Content-Language、Last-</li></ul><p>Event-ID、Content-Type(其值为application/x-www-form-urlencoded、multipart/form- data、text/plain三个中的一个)。</p></li><li><p>非简单请求</p><p>不是简单请求的就是非简单请求，非简单请求是那种对服务器有特殊要求的请求，比如请求方法 是PUT或Delete，或者Content-Type字段的类型是application/json。</p><ul><li><pre><code>浏览器发起预检请求，该请求的请求方法是options，该请求是用来询问的;</code></pre></li><li><pre><code> 服务器收到“预检”请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-</code></pre></li></ul><p>Request-Headers字段以后，确认允许跨源请求，就可以做出回应。</p><ul><li><pre><code>如果浏览器否定了“预检”请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字</code></pre></li></ul><p>段，这时浏览器就会认定服务器不同意预检请求，触发错误;</p><ul><li><pre><code>如果浏览器通过了“预检”请求，以后每次浏览器正常的CORS请求就跟简单请求一样，会有一个</code></pre></li></ul><p>Origin头信息字段，服务器的回应也会有一个Access-Control-Allow-Origin头信息字段;</p><ul><li>过服务端返回的 <code>Access-Control-Allow-*</code> 判定请求是否被允许。<ul><li><code>Access-Control-Allow-Origin</code> 表示允许的来源</li><li><code>Access-Control-Allow-Methods</code> 表示允许的请求方法</li><li><code>Access-Control-Allow-Headers</code> 表示允许的请求头</li><li><code>Access-Control-Allow-Credentials</code> 表示允许携带认证信息</li></ul></li></ul></li></ul></li><li><p><code>反向代理</code></p><p>向代理解决跨域问题的方案依赖同源的服务端对请求做一个转发处理，将请求从跨域请求转换成同源请求,在页面同域下配置一套反向代理服务，页面请求同域的服务端，服务端请求上游的实际的服务端，之后将结果返回给前端。所以反向代理前端几乎不需要做什么。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端实现点击下载文件的几种方法</title>
    <link href="/2020/08/30/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2020/08/30/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="实现点击下载文件的几种方法"><a href="#实现点击下载文件的几种方法" class="headerlink" title="实现点击下载文件的几种方法"></a>实现点击下载文件的几种方法</h3><p><code>可以看看简书归纳的几种方法</code>:<a href="https://www.jianshu.com/p/89dcef3eb9df">前端实现下载的几种方法</a></p><ul><li><h5 id="后端设置header信息实现下载"><a href="#后端设置header信息实现下载" class="headerlink" title="后端设置header信息实现下载"></a>后端设置<code>header</code>信息实现下载</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>:image-jpeg);<br><span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Content-Disposition:attachment;filename=&#x27;download.jpg&#x27;&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li> 局限：需要后端配合</li></ul></li><li><h5 id="使用window-open-或者location-href或者直接使用标签将页面跳转到文件地址-如果文件时浏览器无法打开的文件类型-浏览器会自动下载该文件；或者添加download属性进行下载；download属性告诉浏览器这个a标签不是打开页面预览而是进行下载。"><a href="#使用window-open-或者location-href或者直接使用标签将页面跳转到文件地址-如果文件时浏览器无法打开的文件类型-浏览器会自动下载该文件；或者添加download属性进行下载；download属性告诉浏览器这个a标签不是打开页面预览而是进行下载。" class="headerlink" title="使用window.open()或者location.href或者直接使用标签将页面跳转到文件地址,如果文件时浏览器无法打开的文件类型,浏览器会自动下载该文件；或者添加download属性进行下载；download属性告诉浏览器这个a标签不是打开页面预览而是进行下载。"></a>使用window.open()或者location.href或者直接使用<a>标签将页面跳转到文件地址,如果文件时浏览器无法打开的文件类型,浏览器会自动下载该文件；或者添加<code>download</code>属性进行下载；download属性告诉浏览器这个a标签不是打开页面预览而是进行下载。</h5><ul><li>局限：<ul><li>会自动打开一个页面，体验不好</li><li>图片文本等浏览器能够打开的文件无法下载</li></ul></li></ul></li><li><h5 id="使用FileSaver-js下载"><a href="#使用FileSaver-js下载" class="headerlink" title="使用FileSaver.js下载"></a>使用<code>FileSaver.js下载</code></h5></li><li><h5 id="手动下载xml文件"><a href="#手动下载xml文件" class="headerlink" title="手动下载xml文件"></a>手动下载xml文件</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">downLoadXls</span> = (<span class="hljs-params">data, filename</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([data], &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">msSaveBlob</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 兼容IE，window.navigator.msSaveBlob：以本地方式保存文件</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-title function_">msSaveBlob</span>(blob, <span class="hljs-built_in">decodeURI</span>(filename));<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 创建新的URL并指向File对象或者Blob对象的地址</span><br>    <span class="hljs-keyword">const</span> blobURL = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br>    <span class="hljs-comment">// 创建a标签，用于跳转至下载链接</span><br>    <span class="hljs-keyword">const</span> tempLink = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    tempLink.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    tempLink.<span class="hljs-property">href</span> = blobURL;<br>    tempLink.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;download&#x27;</span>, <span class="hljs-built_in">decodeURI</span>(filename));<br>    <span class="hljs-comment">// 兼容：某些浏览器不支持HTML5的download属性</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tempLink.<span class="hljs-property">download</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      tempLink.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;target&#x27;</span>, <span class="hljs-string">&#x27;_blank&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 挂载a标签</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(tempLink);<br>    tempLink.<span class="hljs-title function_">click</span>();<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(tempLink);<br>    <span class="hljs-comment">// 释放blob URL地址</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(blobURL);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><h4 id="在线预览Excel文件"><a href="#在线预览Excel文件" class="headerlink" title="在线预览Excel文件"></a>在线预览Excel文件</h4><ul><li>微软接口实现： <code>只读不可编辑</code><ul><li>文件的下载地址(可以直接访问的，公共资源要注意文档如果有保密性的话谨慎使用，因为url是直接暴露给微软的)</li><li>将文件地址url encode一下</li><li>调用微软接口预览(必须为 http:// 或 https:// 形式，文档必须是 Word、Excel 或 PowerPoint 文档)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">   <br> <span class="hljs-comment">// 文件的下载地址(可直接访问的)</span><br>fileUrl <br>   <br><span class="hljs-comment">// 将 URL encode 一下；(因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的)</span><br><span class="hljs-keyword">let</span> newFileUrl = <span class="hljs-built_in">encodeURIComponent</span>(fileUrl) <br>   <br><span class="hljs-comment">// 预览</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">`https://view.officeapps.live.com/op/view.aspx?src=`</span>$&#123;newFileUrl&#125;, <span class="hljs-string">&#x27;_blank&#x27;</span>)<br>    <br></code></pre></td></tr></table></figure></li></ul></li><li>转PDF</li><li>直接转HTML</li><li>后端将excel数据传给前端，前端利用插件实现效果展示（sheet.js）</li></ul></li><li><h5 id="在线预览PDF文件"><a href="#在线预览PDF文件" class="headerlink" title="在线预览PDF文件"></a>在线预览PDF文件</h5><ul><li>通过后台返回url 直接通过<code>window.open(ulr)</code>打开</li><li>react实现pdf文档可翻页查看，可放大缩小及全屏等功能，选的是 react-pdf 插件， react-file-viewer 插件也试了下，可以查看pdf，不过是一次性加载全部，最终选了前者</li></ul></li><li><h5 id="在线预览Word文件"><a href="#在线预览Word文件" class="headerlink" title="在线预览Word文件"></a>在线预览Word文件</h5><ul><li>微软接口实现：<code>只读不可编辑</code></li><li>使用<code>Mammoth.js</code>旨在转换 .docx 文档（例如由 Microsoft Word 创建的文档），并将其转换为 HTML。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈call和apply实现原理</title>
    <link href="/2020/08/09/%E6%B5%85%E8%B0%88call%E5%92%8Capply%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2020/08/09/%E6%B5%85%E8%B0%88call%E5%92%8Capply%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="浅谈call和apply实现原理"><a href="#浅谈call和apply实现原理" class="headerlink" title="浅谈call和apply实现原理"></a>浅谈call和apply实现原理</h2><h4 id="Call（thisArg-arg1-arg2-…）"><a href="#Call（thisArg-arg1-arg2-…）" class="headerlink" title="Call（thisArg, arg1, arg2, …）"></a>Call（thisArg, arg1, arg2, …）</h4><p>简单介绍一下<code>call</code>方法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">MDN</a>对它的解释是，<code>call</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。简单看下如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = &#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>&#125;<br><br>bar.<span class="hljs-title function_">call</span>(foo); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>我对它的理解是，<code>A.call(B)</code>,那么<code>A</code>中的<code>this</code>就指向了<code>B</code>这个对象；即<code>call方法能够改变它的调用者的this指向</code>,在这里我们需要注意的是，如果我们没有给传递<code>thisArg</code>给<code>call</code>方法，<code>this</code>的值将会绑定为<code>全局对象</code>,看如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;Findly&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">disPlay</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;data的值是?&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>);<br>&#125;<br>display.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// data的值是?,Findly</span><br></code></pre></td></tr></table></figure><p>接下来，我们就来深究一下它的原理，别着急，先看看下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = &#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>&#125;<br><br>bar.<span class="hljs-title function_">call</span>(foo); <span class="hljs-comment">//1</span><br><br>----------------------------<br><span class="hljs-keyword">const</span> foo = &#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">bar</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>  &#125;<br>&#125;<br>foo.<span class="hljs-title function_">bar</span>(); <span class="hljs-comment">//1</span><br></code></pre></td></tr></table></figure><p>我们发现这两块代码执行结果都是一样的，所以我们可以根据第二块代码来实现<code>call</code>；</p><ul><li><p>将函数设计为某个对象的属性；</p></li><li><p>执行该函数；</p></li><li><p>删除该函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">foo.<span class="hljs-property">fn</span> = bar;<br>foo.<span class="hljs-title function_">fn</span>();<br><span class="hljs-keyword">delete</span> foo.<span class="hljs-property">fn</span>;<br></code></pre></td></tr></table></figure></li></ul><p>所以根据上面的思路，可以实现自己的<code>call</code>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>)&#123;<br>  <span class="hljs-comment">// 得到myCall的this，也就是调用myCall的对象，那个对象调用myCall方法，那么myCall的this就指向这个对象；</span><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br>  context.<span class="hljs-title function_">fn</span>();<br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>&#125;<br><br><span class="hljs-comment">// 测试如下</span><br><span class="hljs-keyword">let</span> foo = &#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;Findly&#x27;</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>&#125;<br>bar.<span class="hljs-title function_">myCall</span>(foo); <span class="hljs-comment">// &#x27;Findly&#x27; </span><br></code></pre></td></tr></table></figure><p>接下来就要考虑到<code>call</code>的第二个参数，指定参数列表；改良版如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) &#123;<br>  <span class="hljs-comment">// this指向调用call的对象</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 调用call的若不是函数则报错</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Error&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>  context = context || <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-comment">// 将调用call函数的对象添加到thisArg的属性中</span><br>  context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-comment">// 执行该属性</span><br>  <span class="hljs-keyword">const</span> result = context.<span class="hljs-title function_">fn</span>(...arg);<br>  <span class="hljs-comment">// 删除该属性</span><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span>;<br>  <span class="hljs-comment">// 返回函数执行结果</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Apply-thisArg-argsArray"><a href="#Apply-thisArg-argsArray" class="headerlink" title="Apply(thisArg, [argsArray])"></a>Apply(thisArg, [argsArray])</h3><p>从上面看来，<code>call</code>方法的作用和<code> apply</code> 方法类似，区别就是<code>call()</code>方法接受的是<strong>参数列表</strong>，而<code>apply()</code>方法接受的是<strong>一个参数数组</strong>。</p><p>所以我们可以在<code>call</code>的基础上进行修改，以实现<code>apply</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-comment">// 赋值作用域参数，如果没有则默认为 window，即访问全局作用域对象</span><br>    context = context || <span class="hljs-variable language_">window</span><br>    <span class="hljs-comment">// 绑定调用函数（.call之前的方法即this，前面提到过调用call方法会调用一遍自身，所以这里要存下来）</span><br>    context.<span class="hljs-property">fn</span> = <span class="hljs-variable language_">this</span><br>    <span class="hljs-comment">// 执行调用函数，需要对是否有参数做判断，记录拿取返回值</span><br>    <span class="hljs-keyword">let</span> result<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>]) &#123;<br>        result = context.<span class="hljs-title function_">fn</span>(...<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">1</span>])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        result = context.<span class="hljs-title function_">fn</span>()<br>    &#125;<br>    <span class="hljs-comment">// 销毁调用函数，以免作用域污染</span><br>    <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(context, <span class="hljs-string">&#x27;fn&#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈instanceof的实现原理</title>
    <link href="/2020/08/09/%E6%B5%85%E8%B0%88instanceof%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2020/08/09/%E6%B5%85%E8%B0%88instanceof%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="浅谈instanceof的实现原理"><a href="#浅谈instanceof的实现原理" class="headerlink" title="浅谈instanceof的实现原理"></a>浅谈instanceof的实现原理</h2><p>​        我们知道<code>typeof</code>一般用来判断基本数据类型，如<code>string</code>,<code>number</code>,<code>boolean</code>,<code>undefined</code>,<code>Symbol</code>,但是判断的<code>null</code>比较特殊虽然结果是<code>object</code>，但它的类型并不是<code>object</code>,至于为什么？☞<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null">详情戳这里</a>，所以对于复杂类型，<code>typeof</code>就比较无力，只能识别出是<code>object</code>但是并不能准确的得出是什么类型。</p><p>​        <code>instanceof</code>可以用来判断对象的具体类型。它的主要依据就是判断一个实例是否属于某一类型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title class_">People</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">const</span> people = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>();<br><br>people <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">People</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>​        在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">MDN</a>上，解释了它的原理，**<code>instanceof</code>** <strong>运算符</strong>用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Car</span>(<span class="hljs-params">make, model, year</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">make</span> = make;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">model</span> = model;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">year</span> = year;<br>&#125;<br><span class="hljs-keyword">const</span> auto = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(<span class="hljs-string">&#x27;Honda&#x27;</span>, <span class="hljs-string">&#x27;Accord&#x27;</span>, <span class="hljs-number">1998</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(auto <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Car</span>);<br><span class="hljs-comment">// expected output: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(auto <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<br><span class="hljs-comment">// expected output: true</span><br><br></code></pre></td></tr></table></figure><p>​        那么接下来就来分析一下它的原理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; left 实例对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; right 构造函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myInstanceof</span>(<span class="hljs-params">left,right</span>)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> left!==<span class="hljs-string">&#x27;object&#x27;</span>||left===<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// 先获得等号右边参数的原型对象；</span><br>  <span class="hljs-keyword">let</span> rightPrototype = right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>  <span class="hljs-comment">// 得到左边参数的隐式原型；</span><br>  left = left.<span class="hljs-property">__proto__</span>; <span class="hljs-comment">// 可以用Object.getPrototypeOf(left)</span><br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">if</span>(left === <span class="hljs-literal">null</span>)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(left === rightPrototype)&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    left = left.<span class="hljs-property">__proto__</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​        根据<code>MDN</code>上的原理。判断构造函数的prototype是否出现在实例对象的原型链上，就能判断它是那种具体的对象了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于基本类型的数据，我们用<code>typeof</code>来判断完全够用，对于复杂的数据类型，我们需要知道它的具体对象类型，则需要使用<code>instanceof</code>来进行判断，当然还有更好的方法，比如<code>Object.prototype.toSting.call</code>，会得到具体的数据类型，这也是目前来说最准确的方法了；</p>]]></content>
    
    
    <categories>
      
      <category>JS基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
